{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab420
\pard\pardeftab420\ri0\qj\partightenfactor0

\f0\fs24 \cf0 /*
\f1 \

\f0 Given an array of integers, return indices of the two numbers such that they add up to a specific target.
\f1 \
\

\f0 You may assume that each input would have exactly one solution, and you may not use the same element twice.
\f1 \
\

\f0 Example:
\f1 \

\f0 Given nums = [2, 7, 11, 15], target = 9,
\f1 \
\

\f0 Because nums[0] + nums[1] = 2 + 7 = 9,
\f1 \

\f0 return [0, 1].
\f1 \
\
\pard\pardeftab420\ri0\qj\partightenfactor0

\f2 \cf0 \'d3\'c9\'d3\'da\'d2\'bb\'d1\'f9\'b5\'c4\'d4\'aa\'cb\'d8\'d6\'bb\'c4\'dc\'d3\'c3\'d2\'bb\'b4\'ce\'a3\'ac\'c9\'e6\'bc\'b0\'b2\'e9\'d5\'d2\'a3\'acmap\'bf\'cf\'b6\'a8\'ca\'c7\'d7\'ee\'bf\'ec\'b5\'c4\'a1\'a3
\f0 map<int,int>
\f2 \'b4\'e6\'cf\'c2\'b1\'ea
\f1 \
\
\pard\pardeftab420\ri0\qj\partightenfactor0

\f0 \cf0 */
\f1 \

\f0 class Solution \{
\f1 \

\f0 public:
\f1 \

\f0     vector<int> twoSum(vector<int>& nums, int target) 
\f1 \
\pard\pardeftab420\fi260\ri0\qj\partightenfactor0

\f0 \cf0 \{\
	     map<int,int> index;\
        index[nums[0]] = 1;\
        for(int i = 1; i < nums.size() ;i++)\
        \{\
            int key = target - nums[i];\
            if (index.find(key) != index.end())\
            \{\
                vector<int> ret(1, index[key]);\
                ret.push_back(i + 1);\
                return ret;\
            \}\
            else\
                index[nums[i]] = i + 1;\
        \}\
\pard\pardeftab420\ri0\qj\partightenfactor0
\cf0     \}
\f1 \

\f0 \};
\f1 \
\
\
python:\
\
class Solution:\
    def twoSum(self, nums, target):\
        """\
        :type nums: List[int]\
        :type target: int\
        :rtype: List[int]\
        """\
        d = \{\}\
        d[nums[0]] = 0\
        size = 1\
        while size < len(nums):\
            if target - nums[size] in d:\
                ret = [d[target - nums[size]], size]\
                return ret\
            if not nums[size] in d:\
                d[nums[size]] = size\
            size += 1}