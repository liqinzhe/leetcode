{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\

\f1 \
way-1:\'c4\'c3\'d2\'bb\'b8\'f6middle\'d6\'b8\'cf\'f2\'b7\'c7\'b5\'b1\'c7\'b0\'c1\'b4\'b1\'ed\'cf\'c2\'d2\'bb\'b8\'f6\'b1\'c8\'bd\'cf\'b6\'d4\'cf\'f3\
\
way-2:\'b0\'d1\'c3\'bf\'b8\'f6\'c1\'b4\'b1\'ed\'b5\'c4\'cd\'b7\'d2\'bb\'b8\'f6\'b4\'e6\'d4\'damap\'c0\'ef\'a3\'ac\'c0\'fb\'d3\'c3map\'b5\'c4\'c5\'c5\'d0\'f2\'b9\'a6\'c4\'dc\'a3\'ac\'c3\'bf\'c4\'c3\'b3\'f6\'d7\'ee\'d0\'a1\'b5\'c4\'d2\'bb\'b8\'f6\'a3\'ac\'b0\'d1\'b8\'fa\'d7\'c5\'b5\'c4\'d2\'bb\'b8\'f6\'b2\'b9\'bd\'f8\'c8\'a5
\f0 \
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* mergeTwoLists(ListNode* p1, ListNode* p2) \
    \{\
        
\f1 //way-1
\f0 \
        if(p1==NULL)\
            return p2;\
        if(p2==NULL)\
            return p1;\
        ListNode *result,*middle,*q,*nex;\
     \
        if(p1->val<p2->val)\
        \{\
            result=p1;\
            q=p1;\
            middle=p2;\
        \}\
        else\
        \{\
            result=p2; \
            q=p2;\
            middle=p1;\
        \}\
         \
        while(q->next)\
        \{\
            if(q->next->val<=middle->val)\
            \{\
                q=q->next;\
            \}\
            else\
            \{\
                nex=q->next;\
                q->next=middle;\
                q=middle;\
                middle=nex;\
            \}\
        \}\
        q->next=middle;\
        return result;\
    \}\
\
\
    //way-2\
        if(p1==NULL)\
            return p2;\
        if(p2==NULL)\
            return p1;\
        multimap<int,ListNode*> mm;\
        \
        mm.insert(pair<int,ListNode*>(p1->val,p1));\
        mm.insert(pair<int,ListNode*>(p2->val,p2));\
        \
        ListNode head(-1);\
        ListNode *p=&head;\
        \
        while(!mm.empty())\
        \{\
            auto it=mm.begin();\
            p->next=it->second;\
            p=p->next;\
            ListNode *q=it->second->next;\
            if(q!=NULL)\
                mm.insert(pair<int,ListNode*>(q->val,q));\
            mm.erase(it);\
        \}\
        return head.next;\
\};}