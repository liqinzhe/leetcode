{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\
\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    TreeNode* sortedListToBST(ListNode* head) \
    \{\
        if(!head)\
           return NULL;\
           \
        ListNode *last=NULL;\
        ListNode *first=head;\
        ListNode *second=head;\
        \
        //find middle\
        while(second->next && second->next->next)\
        \{\
            last=first;\
            second=second->next->next;\
            first=first->next;\
        \}\
        \
        TreeNode * root=new TreeNode(first->val); \
        if(last)\
        \{\
            last->next=NULL;\
            root->left=sortedListToBST(head);\
        \}\
        else\
            root->left=NULL;\
        \
        root->right=sortedListToBST(first->next);\
           \
        return root;\
    \}\
\};}