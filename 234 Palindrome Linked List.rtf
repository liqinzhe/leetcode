{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a singly linked list, determine if it is a palindrome.\
\
Follow up:\
Could you do it in O(n) time and O(1) space?\
\

\f1 \'b4\'d3\'d6\'d0\'bc\'e4\'bf\'aa\'ca\'bc\'b7\'b4\'d7\'aa\'c1\'b4\'b1\'ed
\f0 \
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* reverseList(ListNode* head) \
    \{\
        if(!head || !head->next)\
            return head;\
            \
        ListNode *last=head;\
        ListNode *p=last->next;\
        ListNode *pre=p->next;\
        \
        while(p)\
        \{\
            last->next=pre;\
            p->next=head;\
            head=p;\
            p=last->next;\
            if(p)\
                pre=p->next;\
        \}\
        return head;\
    \}\
\
    bool isPalindrome(ListNode* head) \
    \{\
        ListNode *fast=head;\
        ListNode *slow=head;\
        \
        while(fast && fast->next)\
        \{\
            fast=fast->next->next;\
            slow=slow->next;\
        \}\
        if(fast)\
        \{\
            slow->next=reverseList(slow->next);\
            slow=slow->next;\
        \}\
        else\
        \{\
            slow=reverseList(slow);\
        \}\
        fast=head;\
        while(fast && slow)\
        \{\
            if(fast->val!=slow->val)\
                return 0;\
            fast=fast->next;\
            slow=slow->next;\
        \}\
        \
        return 1;\
    \}\
\};}