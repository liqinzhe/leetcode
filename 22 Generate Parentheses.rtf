{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\
\
For example, given n = 3, a solution set is:\
\
[\
  "((()))",\
  "(()())",\
  "(())()",\
  "()(())",\
  "()()()"\
]\
\
left
\f1 \'b4\'fa\'b1\'ed\'bb\'b9\'d3\'d0\'bc\'b8\'b8\'f6\'a3\'a8 \'d0\'e8\'d2\'aa\'b2\'e5\'c8\'eb\
right \'cd\'ac\'c0\'ed
\f0 \
\
*/\
class Solution \{\
public:\
    void genera(vector<string> &str,string &ss,int left,int right)\
    \{   \
        string pp;\
        if(left==right && left!=0)\
        \{\
            pp=ss+'(';\
            genera(str,pp,left-1,right);\
        \}\
        if(left<right && left>0)\
        \{\
            pp=ss+'(';\
            genera(str,pp,left-1,right);\
            pp=ss+')';\
            genera(str,pp,left,right-1);\
        \}\
        if(left==0 && right!=0)\
        \{\
            pp=ss+')';\
            genera(str,pp,left,right-1);\
        \}\
        if(left==0 && right==0)\
        \{\
            str.push_back(ss);\
        \}\
    \}\
    \
    vector<string> generateParenthesis(int n)\
    \{\
        vector<string> str;\
        string ss="";\
        genera(str,ss,n,n);\
        return str;\
    \}\
\};}