{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
The gray code is a binary numeral system where two successive values differ in only one bit.\
\
Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\
\
For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:\
\
00 - 0\
01 - 1\
11 - 3\
10 - 2\
Note:\
For a given n, a gray code sequence is not uniquely defined.\
\
For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.\
\
way-1:\
\
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ac\'c2\'fa\'d7\'e3\'b8\'f1\'c0\'d7\'c2\'eb\'b6\'a8\'d2\'e5\'b5\'c4\'b6\'fe\'bd\'f8\'d6\'c6\'d0\'f2\'c1\'d0\'bf\'c9\'c4\'dc\'bb\'e1\'b2\'bb\'d6\'b9\'d2\'bb\'d6\'d6\'a3\'ac\'d2\'f2\'b4\'cb\'b1\'be\'ce\'c4\'cb\'f9\'d6\'b8\'b3\'f6\'b5\'c4\'bd\'e2\'b7\'a8\'b2\'a2\'b7\'c7\'ce\'a8\'d2\'bb\'bd\'e2\'a1\'a3
\f0 \
\

\f1 \'bf\'bc\'c2\'c7\'b5\'bd\'b8\'f1\'c0\'d7\'c2\'eb\'cf\'e0\'c1\'da\'c1\'bd\'b8\'f6\'b6\'fe\'bd\'f8\'d6\'c6\'ca\'fd\'d6\'bb\'c4\'dc\'d4\'da\'d2\'bb\'ce\'bb\'c9\'cf\'d3\'d0\'b2\'ee\'d2\'ec\'a3\'ac\'cb\'f9\'d2\'d4\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d3\'c3\'d2\'bb\'d6\'d6\'b4\'d3\'d7\'ee\'b5\'cd\'ce\'aa\'bf\'aa\'ca\'bc\'a3\'ac\'d6\'f0\'ce\'bb\'bc\'d3\'d2\'bb\'b5\'c4\'b7\'bd\'b7\'a8\'c8\'a5\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ac\'d6\'b1\'bd\'d3\'bf\'b4\'d2\'bb\'b8\'f6\'c0\'fd\'d7\'d3\'a3\'ac\'ce\'d2\'c3\'c7\'d2\'d4
\f0 n=3
\f1 \'ce\'aa\'c0\'fd\'a1\'a3
\f0 \
\

\f1 \'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'c1\'ee\'d2\'bb\'bf\'aa\'ca\'bc\'b5\'c4\'ca\'fd\'ce\'aa
\f0 000
\f1 \'a3\'ac\'c8\'bb\'ba\'f3\'d4\'da\'d7\'ee\'b5\'cd\'ce\'bb\'bc\'d3\'d2\'bb\'a3\'ac\'b4\'cb\'ca\'b1\'cb\'f9\'d3\'d0\'d2\'d1\'d6\'aa\'b8\'f1\'c0\'d7\'c2\'eb\'ce\'aa\'a3\'ba
\f0 \
\
000\
001\

\f1 \'c8\'bb\'ba\'f3\'ce\'d2\'c3\'c7\'d4\'da\'c9\'cf\'ca\'f6\'d2\'d1\'d6\'aa\'b5\'c4\'b8\'f1\'c0\'d7\'c2\'eb\'d6\'d0\'a3\'ac\'b4\'d3\'cf\'c2\'cd\'f9\'c9\'cf\'d4\'da\'b4\'ce\'b5\'cd\'ce\'bb\'bc\'d3\'d2\'bb\'a3\'ba
\f0 \
\
000\
001\
011\
010\

\f1 \'d5\'e2\'c0\'ef\'d2\'aa\'d7\'a2\'d2\'e2\'bc\'d3\'d2\'bb\'b5\'c4\'cb\'b3\'d0\'f2\'a3\'ac\'b1\'d8\'d0\'eb\'d2\'aa\'b4\'d3\'cf\'c2\'cd\'f9\'c9\'cf\'bc\'d3\'a3\'ac\'d2\'f2\'ce\'aa\'d0\'c2\'d4\'f6\'bc\'d3\'b5\'c4\'ca\'fd\'d7\'d6\'c8\'e7\'b9\'fb\'ca\'c7\'b4\'d3\'c9\'cf\'cd\'f9\'cf\'c2\'b2\'fa\'c9\'fa\'b5\'c4\'a3\'ac\'c4\'c7\'c3\'b4\'be\'cd\'cf\'e0\'b5\'b1\'d3\'da\'ca\'c7\'cd\'ac\'ca\'b1\'d4\'da\'b6\'e0\'b8\'f6\'ce\'bb\'c9\'cf\'b7\'a2\'c9\'fa\'b8\'c4\'b1\'e4\'a3\'ac\'b6\'f8\'b4\'d3\'cf\'c2\'cd\'f9\'c9\'cf\'bc\'d3\'bf\'c9\'d2\'d4\'c8\'b7\'b1\'a3\'d6\'bb\'d3\'d0\'d2\'bb\'ce\'bb\'b7\'a2\'c9\'fa\'c1\'cb\'b8\'c4\'b1\'e4\'a3\'ac\'d3\'d6\'d2\'f2\'ce\'aa\'d4\'ad\'cf\'c8\'d3\'d0\'b5\'c4\'cf\'e0\'c1\'da\'b8\'f1\'c0\'d7\'c2\'eb\'d6\'ae\'bc\'e4\'d6\'bb\'d3\'d0\'d2\'bb\'ce\'bb\'d3\'d0\'c7\'f8\'b1\'f0\'a3\'ac\'c8\'e7\'b9\'fb\'d4\'da\'cd\'ac\'d2\'bb\'b8\'f6\'ce\'bb\'d6\'c3\'c9\'cf\'b6\'bc\'bc\'d3\'d2\'bb\'a3\'ac\'cf\'e0\'c1\'da\'c1\'bd\'b8\'f6\'d6\'ae\'bc\'e4\'b5\'c4\'b2\'ee\'d2\'ec\'c8\'d4\'c8\'bb\'d6\'bb\'d3\'d0\'d2\'bb\'a3\'ac\'d2\'f2\'b4\'cb\'d0\'d4\'d6\'ca\'bb\'b9\'ca\'c7\'b3\'c9\'c1\'a2\'b5\'c4\'a1\'a3
\f0 \
\

\f1 \'d7\'ee\'ba\'f3\'ce\'d2\'c3\'c7\'d4\'da\'d7\'ee\'b8\'df\'ce\'bb\'c9\'cf\'bc\'d3\'d2\'bb\'a3\'ac\'d7\'a2\'d2\'e2\'bb\'b9\'ca\'c7\'d2\'aa\'b4\'d3\'cf\'c2\'cd\'f9\'c9\'cf\'a3\'ba
\f0 \
\

\f1 \'b8\'b4\'d6\'c6\'b4\'fa\'c2\'eb
\f0 \
000\
001\
011\
010\
110\
111\
101\
100\
\
*******
\f1 \'d4\'da\'b5\'da\'bc\'b8\'ce\'bb\'c9\'cf\'bc\'d3
\f0 1
\f1 \'d2\'e2\'cb\'bc\'be\'cd\'ca\'c7 
\f0 += (1 << i)\
 \
*/\
class Solution \{\
public:\
    vector<int> grayCode(int n) \
    \{\
        vector<int> res(1, 0);\
        for (int i = 0; i < n; ++i) \
        \{\
            int size = res.size();\
            while (size--) \
            \{\
                int curNum = res[size];\
                curNum += (1 << i);  //
\f1 \'b9\'d8\'bc\'fc\'d4\'da\'d5\'e2\'d2\'bb\'b2\'bd\'a3\'a1
\f0 \
                res.push_back(curNum);\
            \}\
        \}\
        return res;\
    \}\
\};}