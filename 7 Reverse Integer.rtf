{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh11780\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Reverse digits of an integer.\
\
Example1: x = 123, return 321\
Example2: x = -123, return -321\
\
click to show spoilers.\
\
Note:\
The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.\
\
\
*/\
class Solution \{\
public:\
    int reverse(int x)\
    \{   \
        if(x==0 || x==INT_MIN)
\f1 //\'c8\'e7\'b9\'fb\'b5\'c8\'d3\'daINT_MIN\'a3\'ac\'c4\'c7\'c3\'b4\'bc\'d3\'d2\'bb\'b8\'f6\'b8\'ba\'ba\'c5\'bb\'e1\'b3\'ac\'b3\'f6INT_MAX
\f0 \
            return 0;\
        \
        bool fushu=false;\
        if(x<0)\
        \{\
            fushu=true; \
            x=-x;\
        \}\
        vector<int> m1;\
        while(x!=0)\
        \{\
            m1.push_back(x%10);\
            x=x/10;\
        \}\
            \
        long long sum=m1[0];\
        int k=1;\
        while(k<m1.size())\
        \{\
            sum=sum*10+m1[k];\
            k++;\
        \}\
        \
        if(sum>2147483648)\
            return 0;\
            \
        return fushu?-sum:sum;\
    \}\
\};\
\
python:\
class Solution(object):\
    def reverse(self, x):\
        """\
        :type x: int\
        :rtype: int\
        """\
        flag = 1\
        if x < 0:\
            flag = -1\
            x = -x\
        d = []\
        while x != 0:\
            d.append(x % 10)\
            x /= 10\
        ret = 0\
        for i in d:\
            ret = ret * 10 + i\
        if flag > 0 and ret < 2147483647:\
            return ret * flag\
        elif flag < 0 and ret < 2147483648:\
            return ret * flag\
        else:\
            return 0}