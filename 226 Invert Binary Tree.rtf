{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Invert a binary tree.\
\
     4\
   /   \\\
  2     7\
 / \\   / \\\
1   3 6   9\
to\
     4\
   /   \\\
  7     2\
 / \\   / \\\
9   6 3   1\
\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    TreeNode* invertTree(TreeNode* root) \
    \{\
        if (!root || (!root->left && !root->right))\
            return root;\
        \
        TreeNode *temp = root->left;\
        root->left = root->right;\
        root->right = temp;\
        \
        invertTree(root->left);\
        invertTree(root->right);\
        return root;\
    \}\
\};}