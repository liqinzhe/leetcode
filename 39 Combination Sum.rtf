{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.\
\
The same repeated number may be chosen from C unlimited number of times.\
\
Note:\
All numbers (including target) will be positive integers.\
The solution set must not contain duplicate combinations.\
For example, given candidate set [2, 3, 6, 7] and target 7, \
A solution set is: \
[\
  [7],\
  [2, 2, 3]\
]\
\

\f1 \'b7\'bd\'b7\'a8\'a3\'ba\
\'b5\'e4\'d0\'cdbacktracking!\
\'b5\'dd\'b9\'e9\'a3\'ac\'c5\'c5\'d0\'f2\'ba\'f3\'b5\'dd\'b9\'e9\'a3\'ac\'d3\'d0\'b5\'e3
\f0 DFS
\f1 \'b5\'c4\'b8\'d0\'be\'f5
\f0 \
\
\
*/\
class Solution \{\
public:\
    void combine(vector<int>& cand, vector<vector<int>> &result, vector<int> path, int pos, int base, int target)\
    \{\
        if(base==target)\
        \{\
            result.push_back(path);\
            return;\
        \}\
        else if(base>target)\
            return;\
        else\
        \{\
            for(int i=pos;i<cand.size();i++)\
            \{\
                path.push_back(cand[i]);\
                combine(cand,result,path,i,base+cand[i],target);\
                path.pop_back();\
            \}\
        \}\
    \}\
    \
    \
    vector<vector<int>> combinationSum(vector<int>& cand, int target) \
    \{\
         sort(cand.begin(),cand.end());\
         vector<vector<int>> result;\
         vector<int> path;\
         combine(cand,result,path,0,0,target);\
\
         return result;\
    \}\
\};}