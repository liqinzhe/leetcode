{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a singly linked list L: L0
\f1 \uc0\u8594 
\f0 L1
\f1 \uc0\u8594 
\f0 \'85
\f1 \uc0\u8594 
\f0 Ln-1
\f1 \uc0\u8594 
\f0 Ln,\
reorder it to: L0
\f1 \uc0\u8594 
\f0 Ln
\f1 \uc0\u8594 
\f0 L1
\f1 \uc0\u8594 
\f0 Ln-1
\f1 \uc0\u8594 
\f0 L2
\f1 \uc0\u8594 
\f0 Ln-2
\f1 \uc0\u8594 
\f0 \'85\
\
You must do this in-place without altering the nodes' values.\
\
For example,\
Given \{1,2,3,4\}, reorder it to \{1,4,2,3\}.\
\
\

\f2 \'a3\'a8\'b7\'a8
\f0 1
\f2 \'a3\'a9\'ce\'d2\'b5\'c4\'cb\'bc\'c2\'b7\'ca\'c7\'c3\'bf\'b4\'ce\'d5\'d2\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'a3\'ac\'c8\'bb\'ba\'f3\'b2\'e5\'c8\'eb\'b5\'bd\'d3\'a6\'b8\'c3\'b5\'c4\'ce\'bb\'d6\'c3\'a3\'ac\'b5\'ab\'ca\'c7\'d5\'e2\'d1\'f9\'ce\'aa
\f0 o(n^2)
\f2 \'a1\'a3
\f0 \
\

\f2 \'a3\'a8\'b7\'a8
\f0 2
\f2 \'a3\'a9\'bb\'b9\'d3\'d0\'d2\'bb\'b8\'f6\'cb\'bc\'c2\'b7\'ca\'c7\'d6\'d0\'bc\'e4\'b7\'d6\'ce\'aa\'c1\'bd\'bd\'da\'a3\'ac\'ba\'f3\'d2\'bb\'bd\'da\'b5\'b9\'d6\'c3\'a3\'ac\'c8\'bb\'ba\'f3\'b0\'a4\'b8\'f6\'b2\'e5\'c8\'eb
\f0 ,o(n)
\f2 \'a1\'a3
\f0 \
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* Reverse2(ListNode* head)\
    \{\
        if(!head)\
            return head;\
        else if(!head->next)\
            return head;\
        else\
        \{\
            ListNode* tail=head; \
            ListNode* coming=head->next;\
          \
            while(coming)\
            \{\
                tail->next=coming->next;\
                coming->next=head;\
              \
                head=coming;\
                coming=tail->next;\
            \}\
            return head; \
        \}\
        return head;\
    \}\
    \
    void reorderList(ListNode* head) \
    \{\
        if(!head)\
            return;   \
        \
        ListNode *fast=head;\
        ListNode *slow=head;\
       \
        //
\f2 \'bd\'ab\'c1\'b4\'b1\'ed\'b2\'f0\'ce\'aa\'c1\'bd\'bd\'da
\f0 \
        while(fast && fast->next)\
        \{\
            fast=fast->next->next;\
            slow=slow->next;\
        \}\
        fast=slow->next;\
        slow->next=NULL;\
       \
        //
\f2 \'d7\'aa\'d6\'c3\'b5\'da\'b6\'fe\'bd\'da
\f0 \
        fast=Reverse2(fast);\
       \
        //
\f2 \'ba\'cf\'b2\'a2
\f0 \
        ListNode *p=fast;\
        ListNode *q=head;\
        while(fast && q)\
        \{\
            p=fast;\
            fast=fast->next;\
          \
            p->next=q->next; \
            q->next=p;\
            q=p->next;      \
        \}\
    \}\
\};}