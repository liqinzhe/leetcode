{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, flatten it to a linked list in-place.\
\
For example,\
Given\
\
         1\
        / \\\
       2   5\
      / \\   \\\
     3   4   6\
The flattened tree should look like:\
   1\
    \\\
     2\
      \\\
       3\
        \\\
         4\
          \\\
           5\
            \\\
             6\
             \

\f1 \'c7\'b0\'d0\'f2\'b1\'e9\'c0\'fa
\f0 \
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void bianhuan(TreeNode* r1, TreeNode* r2)\
    \{\
        TreeNode* p = r1;\
        while (p->right)\
            p = p->right;\
        p->right = r2;\
    \}\
    \
    void flatten(TreeNode* root) \
    \{\
        if  (!root || (!root->left && !root->right))\
            return;\
       \
        if (!root->left)\
            flatten(root->right);\
        else if(!root->right)\
        \{\
            root->right = root->left;\
            root->left = NULL;\
            flatten(root->right);\
        \}     \
        else\
        \{\
            bianhuan(root->left, root->right); \
            root->right = root->left;\
            root->left = NULL;\
            flatten(root->right);\
        \}\
    \}\
\};}