{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Implement the following operations of a stack using queues.\
\
push(x) -- Push element x onto stack.\
pop() -- Removes the element on top of the stack.\
top() -- Get the top element.\
empty() -- Return whether the stack is empty.\
Notes:\
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.\
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.\
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).\
\

\f1 \'b2\'e5\'c8\'eb\'b5\'c4\'ca\'b1\'ba\'f2\'b9\'b9\'d4\'ec\'b3\'c9\'d2\'bb\'b8\'f6\'b6\'d1\'d5\'bb\'a3\'a1
\f0 \
*/\
class MyStack \{\
public:\
    /** Initialize your data structure here. */\
    MyStack() \{\
    \}\
    \
    /** Push element x onto stack. */\
    void push(int x) \
    \{\
        int size = que.size();\
        que.push(x);\
        for (int i = 0; i < size; i++)\
        \{\
            que.push(que.front());\
            que.pop();\
        \}\
    \}\
    \
    /** Removes the element on top of the stack and returns that element. */\
    int pop() \
    \{\
        int key = que.front();\
        que.pop();\
        return key;\
    \}\
    \
    /** Get the top element. */\
    int top() \
    \{\
        return que.front();\
    \}\
    \
    /** Returns whether the stack is empty. */\
    bool empty() \{\
        return que.empty();    \
    \}\
private:\
    queue<int> que;\
\
\};\
\
/**\
 * Your MyStack object will be instantiated and called as such:\
 * MyStack obj = new MyStack();\
 * obj.push(x);\
 * int param_2 = obj.pop();\
 * int param_3 = obj.top();\
 * bool param_4 = obj.empty();\
 */}