{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Evaluate the value of an arithmetic expression in Reverse Polish Notation.\
\
Valid operators are +, -, *, /. Each operand may be an integer or another expression.\
\
Some examples:\
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9\
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \expnd0\expndtw0\kerning0
\'bc\'c6\'cb\'e3\'ba\'f3\'d7\'ba\'b1\'ed\'b4\'ef\'ca\'bd\'a3\'a1\'d3\'c3STACK
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 */\
class Solution \{\
public:\
    int evalRPN(vector<string>& tokens) \
    \{\
        stack<int> shuzi;\
        for (int i = 0; i < tokens.size(); i++)\
        \{\
            if(tokens[i] == "+") \
            \{\
                int a = shuzi.top(); \
                shuzi.pop();\
                int b = shuzi.top();\
                shuzi.top() = a + b; \
            \} \
            else if(tokens[i] == "-") \
            \{\
                int a = shuzi.top(); \
                shuzi.pop();\
                int b = shuzi.top();\
                shuzi.top() = b - a; \
            \}\
            else if(tokens[i] == "*") \
            \{\
                int a = shuzi.top(); \
                shuzi.pop();\
                int b = shuzi.top();\
                shuzi.top() = a * b; \
            \}\
            else if(tokens[i] == "/") \
            \{\
                int a = shuzi.top(); \
                shuzi.pop();\
                int b = shuzi.top();\
                shuzi.top() = b / a; \
            \}\
            else\
                shuzi.push( atoi(tokens[i].c_str()) );\
        \}\
        return shuzi.top();\
    \}\
\};}