{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.\
\
For example:\
\
Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].\
\
Note:\
The order of the result is not important. So in the above example, [5, 3] is also correct.\
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?\
\
way-1:map\
\
way-2:
\f1 \'ce\'bb\'b2\'d9\'d7\'f7
\f0 \

\f1 \'cb\'bc\'c2\'b7\'a3\'ba
\f0  \

\f1 \'ce\'d2\'c3\'c7\'d6\'aa\'b5\'c0\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'d6\'d0\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'ca\'c7\'b3\'f6\'cf\'d6\'d2\'bb\'b4\'ce\'a3\'ac\'c6\'e4\'cb\'fb\'d4\'aa\'cb\'d8\'ca\'c7\'b3\'f6\'cf\'d6\'c1\'bd\'b4\'ce\'b5\'c4\'bd\'e2\'cc\'e2\'cb\'bc\'c2\'b7\'a1\'a3\'d6\'bb\'d0\'e8\'d2\'aa\'b0\'d1\'cb\'f9\'d3\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'d2\'ec\'bb\'f2\'d6\'ae\'ba\'f3\'a3\'ac\'c4\'c7\'c3\'b4\'d2\'ec\'bb\'f2\'b5\'c4\'bd\'e1\'b9\'fb\'be\'cd\'ca\'c7\'c4\'c7\'b8\'f6\'d7\'ee\'d6\'d5\'b5\'c4\'b5\'a5\'b8\'f6\'b5\'c4\'d4\'aa\'cb\'d8\'a1\'a3\'d5\'e2\'b8\'f6\'cb\'bc\'c2\'b7\'ba\'dc\'bc\'f2\'b5\'a5\'a3\'ac\'be\'cd\'ca\'c7\'b0\'d1\'c3\'bf\'b8\'f6\'ca\'fd\'c0\'ed\'bd\'e2\'ce\'aa\'b6\'d4\'d3\'a6\'b5\'c4\'b6\'fe\'bd\'f8\'d6\'c6\'ce\'bb\'a3\'ac\'c4\'c7\'c3\'b4\'c4\'c7\'d0\'a9\'b3\'f6\'cf\'d6\'c1\'bd\'b4\'ce\'b5\'c4\'d4\'aa\'cb\'d8\'a3\'ac\'cb\'fb\'c3\'c7\'d4\'da
\f0 1
\f1 \'b3\'f6\'cf\'d6\'b5\'c4\'cb\'f9\'d3\'d0\'ce\'bb\'d6\'c3\'a3\'ac
\f0 1
\f1 \'b6\'bc\'b3\'f6\'cf\'d6\'c1\'bd\'b4\'ce\'a3\'ac\'d2\'ec\'bb\'f2\'cd\'ea\'be\'cd\'bb\'b9\'ca\'c7
\f0 0
\f1 \'a1\'a3\'b6\'f8\'b6\'d4\'d3\'da\'c4\'c7\'b8\'f6\'b5\'a5\'b3\'f6\'cf\'d6\'d2\'bb\'b4\'ce\'b5\'c3\'d4\'aa\'cb\'d8\'a3\'ac\'cb\'fc\'c3\'bf\'b8\'f6\'b6\'fe\'bd\'f8\'d6\'c6\'ce\'bb\'b6\'d4\'d3\'a6\'b5\'c4\'ca\'fd\'d7\'d6\'b3\'f6\'cf\'d6\'d2\'bb\'b4\'ce\'a1\'a3\'cb\'f9\'d2\'d4\'d7\'ee\'d6\'d5\'b5\'c4\'d2\'ec\'bb\'f2\'bd\'e1\'b9\'fb\'be\'cd\'cf\'e0\'b5\'b1\'d3\'da\'b0\'d1\'b3\'f6\'cf\'d6\'c1\'bd\'b4\'ce\'b5\'c4\'d4\'aa\'cb\'d8\'c8\'ab\'b2\'bf\'c8\'a5\'b3\'fd\'a1\'a3
\f0  \

\f1 \'d3\'d0\'c1\'cb\'c9\'cf\'c3\'e6\'b5\'c4\'bb\'f9\'b1\'be\'b5\'c4\'cb\'bc\'c2\'b7\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'bd\'ab\'ca\'fd\'d7\'e9\'b7\'d6\'b3\'c9\'c1\'bd\'b8\'f6\'b2\'bf\'b7\'d6\'a3\'ac\'c3\'bf\'b8\'f6\'b2\'bf\'b7\'d6\'c0\'ef\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'d2\'bb\'b4\'ce\'a3\'ac\'c6\'e4\'d3\'e0\'d4\'aa\'cb\'d8\'b6\'bc\'b3\'f6\'cf\'d6\'c1\'bd\'b4\'ce\'a1\'a3\'c4\'c7\'c3\'b4\'ca\'b9\'d3\'c3\'d5\'e2\'d6\'d6\'b7\'bd\'b7\'a8\'be\'cd\'bf\'c9\'d2\'d4\'d5\'d2\'b3\'f6\'d5\'e2\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'c1\'cb\'a1\'a3\'b2\'bb\'b7\'c1\'bc\'d9\'c9\'e8\'d5\'e2\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'ca\'c7
\f0 x
\f1 \'a3\'ac
\f0 y,
\f1 \'b6\'f8\'c7\'d2
\f0 x!=y
\f1 \'a3\'ac\'c4\'c7\'c3\'b4\'d7\'ee\'d6\'d5\'cb\'f9\'d3\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'d2\'ec\'bb\'f2\'b5\'c4\'bd\'e1\'b9\'fb\'be\'cd\'ca\'c7
\f0 res = x^y.
\f1 \'ba\'dc\'cf\'d4\'c8\'bb\'a3\'ac
\f0 res!= 0
\f1 \'a3\'ac\'c8\'e7\'b9\'fb
\f0 res=0
\f1 \'a3\'ac\'c4\'c7\'c3\'b4
\f0 x=y
\f1 \'a3\'ac\'d3\'eb\'cc\'e2\'d2\'e2\'b2\'bb\'b7\'fb\'a1\'a3\'bc\'c8\'c8\'bb
\f0 res
\f1 \'a3\'a1
\f0 =0
\f1 \'a3\'ac\'c4\'c7\'c3\'b4\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d5\'d2\'b3\'f6\'c6\'e4\'b6\'fe\'bd\'f8\'d6\'c6\'b1\'ed\'ca\'be\'d6\'d0\'b5\'c4\'c4\'b3\'d2\'bb\'ce\'bb\'ca\'c7
\f0 1
\f1 \'a3\'ac\'ce\'d2\'c3\'c7\'b4\'d3\'b5\'cd\'ce\'bb\'cd\'f9\'b8\'df\'ce\'bb\'d5\'d2\'a3\'ac\'d5\'d2\'b5\'bd\'b5\'da\'d2\'bb\'b8\'f6\'b6\'fe\'bd\'f8\'d6\'c6\'ce\'bb\'ca\'c7
\f0 1
\f1 \'b5\'c4\'ce\'bb\'d6\'c3\'a1\'a3\'b6\'d4\'d3\'da\'d4\'ad\'c0\'b4\'b5\'c4\'ca\'fd\'d7\'e9\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'b8\'f9\'be\'dd\'d5\'e2\'b8\'f6\'ce\'bb\'d6\'c3\'ca\'c7\'b2\'bb\'ca\'c7
\f0 1
\f1 \'be\'cd\'bf\'c9\'d2\'d4\'bd\'ab\'ca\'fd\'d7\'e9\'b7\'d6\'b3\'c9\'c1\'bd\'b8\'f6\'b2\'bf\'b7\'d6\'a1\'a3
\f0 x
\f1 \'a3\'ac
\f0 y
\f1 \'d4\'da\'b2\'bb\'cd\'ac\'b5\'c4\'c1\'bd\'b8\'f6\'d7\'d3\'ca\'fd\'d7\'e9\'d6\'d0\'a1\'a3\'b6\'f8\'c7\'d2\'b6\'d4\'d3\'da\'c6\'e4\'cb\'fb\'b3\'c9\'b6\'d4\'b3\'f6\'cf\'d6\'b5\'c4\'d4\'aa\'cb\'d8\'a3\'ac\'d2\'aa\'c3\'b4\'d4\'da
\f0 x
\f1 \'cb\'f9\'d4\'da\'b5\'c4\'c4\'c7\'b8\'f6\'ca\'fd\'d7\'e9\'a3\'ac\'d2\'aa\'c3\'b4\'d4\'da
\f0 y
\f1 \'cb\'f9\'d4\'da\'b5\'c4\'c4\'c7\'b8\'f6\'ca\'fd\'d7\'e9\'a1\'a3\'bc\'d9\'c9\'e8\'b2\'bb\'ca\'c7\'b5\'c4\'bb\'b0\'a3\'ac\'c4\'c7\'cb\'b5\'c3\'f7\'d5\'e2\'d2\'bb\'b6\'d4\'ca\'fd\'d4\'da\'d5\'e2\'d2\'bb\'ce\'bb\'c9\'cf\'d2\'bb\'b8\'f6\'ca\'c7
\f0 0
\f1 \'d2\'bb\'b8\'f6\'ca\'c7
\f0 1
\f1 \'a3\'ac\'ba\'dc\'cf\'d4\'c8\'bb\'b2\'bb\'b7\'fb\'cb\'fc\'c3\'c7\'ca\'c7\'d2\'bb\'b6\'d4\'cf\'e0\'b5\'c8\'ca\'fd\'b5\'c4\'cc\'f5\'bc\'fe\'a1\'a3
\f0 \
\
\
*/\
class Solution \{\
public:\
    vector<int> singleNumber(vector<int>& nums) \
    \{\
         //way-1\
         /*\
         map<int,int> mm;\
         for(int i=0;i<nums.size();i++)\
            mm[nums[i]]++;\
         vector<int> ret;\
         for(auto it=mm.begin();it!=mm.end();it++)\
         \{\
             if(it->second==1)\
                ret.push_back(it->first);\
         \}\
         return ret;\
         */\
         \
         //way-2\
         int res=0;\
         for(auto num:nums)\
             res^=num;\
\
         int flag=1;\
         while(1)\
         \{\
             if(res & flag)\
                break;\
             flag<<=1;\
         \}\
         int res1=0,res2=0;\
         for(auto num:nums)\
         \{\
             if(num & flag)\
                res1^=num;\
             else\
                res2^=num;\
         \}\
         vector<int> ret=\{res1,res2\};\
         return ret;\
    \}\
\};}