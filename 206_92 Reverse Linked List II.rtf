{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Reverse a linked list from position m to n. Do it in-place and in one-pass.\
\
For example:\
Given 1->2->3->4->5->NULL, m = 2 and n = 4,\
\
return 1->4->3->2->5->NULL.\
\
way-1:vector save \
\
way-2:directly reverse list\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* reverseBetween(ListNode* head, int m, int n) \
    \{\
        //way-1\
        /*\
        ListNode *p=head;\
        for(int i=1;i<m;i++)\
            p=p->next;\
        ListNode *q=p;\
        stack<int> cun;\
        for(int j=0;j<=n-m;j++)\
        \{\
            cun.push(q->val);\
            q=q->next;\
        \}\
        q=p;\
        for(int j=0;j<=n-m;j++)\
        \{\
            q->val=cun.top();\
            q=q->next;\
            cun.pop();\
        \}\
        return head;\
        */\
        \
        //way-2\
        if(!head || !head->next || m>=n)\
            return head;\
        \
        ListNode hhead(-1);\
        hhead.next=head;\
        \
        ListNode *point=&hhead;\
        \
        for(int i=1;i<m;i++)\
            point=point->next;\
        \
        ListNode *p=point->next;\
        ListNode *q=p->next;\
        \
        \
        int count=n-m;\
        while(count>0)\
        \{\
            p->next=q->next;\
            q->next=point->next;\
            point->next=q;\
            q=p->next;\
            count--;\
        \}\
        \
        return hhead.next;\
    \}\
\};}