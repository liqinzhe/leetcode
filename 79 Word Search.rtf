{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh18700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a 2D board and a word, find if the word exists in the grid.\
\
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\
\
For example,\
Given board =\
\
[\
  ['A','B','C','E'],\
  ['S','F','C','S'],\
  ['A','D','E','E']\
]\
word = "ABCCED", -> returns true,\
word = "SEE", -> returns true,\
word = "ABCB", -> returns false.\
\

\f1 way-1: 
\f0 DFS
\f1 \'a3\'ac\'d3\'c3\'b5\'dd\'b9\'e9\'ca\'b5\'cf\'d6\'b5\'c4
\f0 \
*/\
class Solution \{\
public:\
	bool exist(vector<vector<char> > &board, string word) \
    \{\
        int row = board.size();\
        int col = board[0].size();\
        \
        for (int i = 0; i < row; i++)\
        \{\
            for (int j = 0; j < col; j++)\
            \{\
                if (board[i][j] == word[0])\
                \{\
                    if (helper(board, i, j, word, 1))\
                        return true;\
                \}\
            \}\
        \}\
        return false;\
    \}\
    \
    bool helper(vector<vector<char> > &board, \
                int x,\
                int y,\
                string word,\
                int pos)\
    \{\
        if (pos == word.size())\
            return true;\
            \
        int row = board.size();\
        int col = board[0].size();\
        \
        int a[4] = \{0, 1, 0, -1\};\
        int b[4] = \{1, 0, -1, 0\};\
        \
        for (int i = 0; i < 4; i++)\
        \{\
            int _x = x + a[i];\
            int _y = y + b[i];\
            if (_x >= 0 && _x <row && _y >= 0 && _y < col && board[_x][_y] == word[pos])\
            \{\
                char temp = board[_x][_y];\
                board[_x][_y] = '*';\
                if (helper(board, _x, _y, word, pos + 1))\
                    return true;\
                board[_x][_y] = temp;\
            \}\
        \}\
        return false;\
    \}	\
\};}