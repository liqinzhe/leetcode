{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, return the postorder traversal of its nodes' values.\
\
For example:\
Given binary tree \{1,#,2,3\},\
   1\
    \\\
     2\
    /\
   3\
return [3,2,1].\
\
Note: Recursive solution is trivial, could you do it iteratively?\
\
\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void recursive(TreeNode* p,vector<int> & ret)\
    \{\
        if(!p)   \
            return;\
        \
        recursive(p->left, ret);\
        recursive(p->right, ret);       \
        ret.push_back(p->val);    \
    \}\
    vector<int> postorderTraversal(TreeNode* root) \
    \{\
        //way-1: 
\f1 \'b5\'dd\'b9\'e9
\f0 \
        /*\
        vector<int> ret; \
        recursive(root, ret);\
        return ret;\
        */\
         \
        //way-2: 
\f1 \'b5\'fc\'b4\'fa
\f0 \
        vector<int> ret;\
        TreeNode* p = root;\
        stack<TreeNode*> point;\
        if(root)\
            point.push(root);\
         \
        TreeNode* last = root;   // 
\f1 \'d3\'c3\'c0\'b4\'b4\'e6\'c9\'cf\'d2\'bb\'b8\'f6
\f0 push
\f1 \'bd\'f8
\f0 ret
\f1 \'b5\'c4\'bd\'da\'b5\'e3
\f0 \
        while (!point.empty()) \
        \{\
            p = point.top();         \
              \
            if (last == p->left || last == p->right)\
            \{\
                ret.push_back(p->val);\
                last = p;\
                point.pop(); \
                continue; \
            \}\
              \
            if (p->right)\
                point.push(p->right);\
            if (p->left)\
                point.push(p->left);\
              \
            if (!p->right && !p->left)\
            \{\
                ret.push_back(p->val);\
                last = p;\
                point.pop();\
            \}      \
        \} \
        return ret;\
    \}\
\};}