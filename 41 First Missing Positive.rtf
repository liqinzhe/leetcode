{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an unsorted integer array, find the first missing positive integer.\
\
For example,\
Given [1,2,0] return 3,\
and [3,4,-1,1] return 2.\
\
Your algorithm should run in O(n) time and uses constant space.\
\

\f1 \'b7\'bd\'b7\'a8\'d2\'bb\'a3\'ba\'c5\'c5\'d0\'f2\'ba\'f3\'a3\'ac\'b4\'d3\'c7\'b0\'c3\'e6\'b5\'da\'d2\'bb\'b8\'f6\'d5\'fd\'ca\'fd\'cd\'f9\'ba\'f3\'d5\'d2\'a3\'ac\'bf\'b4\'b6\'aa\'ca\'a7\'c1\'cb\'c4\'c4\'d2\'bb\'b8\'f6\'a3\'ac
\f0 return
\f1 \'a1\'a3\'b5\'ab\'ca\'c7\'c5\'c5\'d0\'f2\'b8\'b4\'d4\'d3\'b6\'c8\'b2\'bb\'c2\'fa\'d7\'e3
\f0 O(n)\
\

\f1 \'b7\'bd\'b7\'a8\'b6\'fe\'a3\'ba\'b0\'b4\'d5\'d5
\f0 nums[i]
\f1 \'b5\'c4\'d6\'b5\'bd\'ab\'cb\'fc\'d2\'c6\'b6\'af\'b5\'bd\'b8\'c3\'c8\'a5\'b5\'c4\'ce\'bb\'d6\'c3\'c4\'c7\'be\'cd\'ca\'c7
\f0 nums[nums[i]-1],
\f1 \'b1\'c8\'c8\'e7\'cb\'b5
\f0 nums[i]=5
\f1 \'a3\'ac\'c4\'c7\'c3\'b4\'d3\'a6\'b8\'c3\'d4\'da\'cf\'c2\'b1\'ea\'ce\'aa
\f0 4
\f1 \'b5\'c4\'ce\'bb\'d6\'c3
\f0 \
\
\
\
*/\
class Solution \{\
public:\
    int firstMissingPositive(vector<int>& nums) \
    \{\
        //way-1\
        /*\
        sort(nums.begin(),nums.end());\
        int key=1;\
        for(int i=0;i<nums.size();i++)\
        \{\
            if(nums[i]>key)\
              return key;\
            else if(nums[i]==key)\
              key++;\
        \}\
        return key;\
        */\
        \
        int i=0;\
        while(i<nums.size())\
        \{\
           if(nums[i]>0 && nums[i]<=nums.size() && nums[i]!=i+1 && nums[i]!=nums[nums[i]-1])\
              swap(nums[i],nums[nums[i]-1]);\
           else\
              i++;\
        \}\
        for(int k=0;k<nums.size();k++)\
        \{\
           if(nums[k]!=k+1)\
              return k+1;\
        \}\
        return nums.size()+1;\
    \}\
\};}