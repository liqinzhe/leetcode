{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.\
\
Return a deep copy of the list.\
\
way-1:\
     1-
\f1 \'d4\'da\'be\'c9\'bd\'da\'b5\'e3\'ba\'f3\'c3\'e6\'b8\'b4\'d6\'c6\'d2\'bb\'b8\'f6\'d0\'c2\'bd\'da\'b5\'e3
\f0 \
     2-
\f1 \'c3\'bf\'d2\'bb\'b8\'f6\'b8\'b1\'b1\'be\'b8\'b3\'d6\'b5
\f0 random\
     3-
\f1 \'b2\'f0\'b7\'d6\'c1\'b4\'b1\'ed
\f0 \
     **
\f1 \'d4\'da\'b5\'da\'c8\'fd\'b2\'bd\'d3\'d0\'d2\'bb\'b8\'f6\'b9\'d8\'bc\'fc\'a3\'ac\'b2\'bb\'c4\'dc\'d6\'bb\'b2\'f0\'b3\'f6\'d0\'e8\'d2\'aa\'b5\'c4\'b8\'b1\'b1\'be\'a3\'ac\'d6\'ae\'c7\'b0\'b5\'c4\'d4\'ad\'b1\'be\'c1\'b4\'b1\'ed\'d2\'b2\'d2\'aa\'d6\'d8\'d0\'c2\'b4\'ae\'d4\'da\'d2\'bb\'c6\'f0\'a3\'ac\'b2\'bb\'c8\'bb\'bb\'e1\'b1\'a8\'b4\'ed\'a3\'a1\'a3\'a1
\f0 \
\
way-2:\
map<
\f1 \'be\'c9\'b5\'d8\'d6\'b7\'a3\'ac\'d0\'c2\'b5\'d8\'d6\'b7
\f0 >
\f1 \'a3\'ac\'cf\'c8\'b0\'b4\'c6\'d5\'cd\'a8\'b7\'bd\'b7\'a8\'b8\'b4\'d6\'c6\'c1\'b4\'b1\'ed\'a3\'ac\'d4\'d9\'c1\'bd\'b8\'f6\'c1\'b4\'b1\'ed\'cd\'ac\'ca\'b1\'d7\'df\'b8\'b4\'d6\'c6
\f0 random
\f1 \'a3\'a8\'be\'c9\'bd\'da\'b5\'e3
\f0 a
\f1 \'a3\'ac\'d0\'c2\'bd\'da\'b5\'e3
\f0 a\'92
\f1 \'a3\'a9
\f0 a'->random=map[a->random](
\f1 \'bf\'d5\'d6\'b8\'d5\'eb\'b5\'a5\'b6\'c0\'b4\'a6\'c0\'ed
\f0 ) \
\
*/ \
/**\
 * Definition for singly-linked list with a random pointer.\
 * struct RandomListNode \{\
 *     int label;\
 *     RandomListNode *next, *random;\
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    RandomListNode *copyRandomList(RandomListNode *head) \
    \{\
         //way-1\
         /*\
         if(!head)\
            return NULL;\
         \
         //
\f1 \'ca\'d7\'cf\'c8\'a3\'ac\'c3\'bf\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3\'ba\'f3\'c3\'e6\'b8\'e3\'d2\'bb\'b8\'f6\'b8\'b1\'b1\'be
\f0 \
         RandomListNode *p=head;\
         while(p)\
         \{\
             RandomListNode *q=new RandomListNode(p->label);\
             q->next=p->next;\
             p->next=q;\
             p=q->next;\
         \}\
         //
\f1 \'b8\'f8\'c3\'bf\'d2\'bb\'b8\'f6\'b8\'b1\'b1\'be\'b5\'c4
\f0 random
\f1 \'b8\'b3\'d6\'b5
\f0 \
         p=head;\
         while(p)\
         \{\
            if(p->random)\
              p->next->random=p->random->next;\
            p=p->next->next;\
         \}\
         //
\f1 \'c1\'b4\'b1\'ed\'b5\'c4\'c5\'bc\'ca\'fd\'cf\'ee\'ce\'aa\'b8\'b4\'d6\'c6\'ba\'f3\'b5\'c4\'c1\'b4\'b1\'ed
\f0 \
         RandomListNode *ret=head->next;\
         RandomListNode *tail=head;\
         p=head->next;\
         while(1)\
         \{\
            //tail
\f1 \'c1\'b4\'bd\'d3\'d4\'ad\'c1\'b4\'b1\'ed
\f0  \
            tail->next=p->next;\
            tail=tail->next;\
            if(!tail)\
                break;\
            //p
\f1 \'c1\'b4\'bd\'d3\'d0\'c2\'c1\'b4\'b1\'ed
\f0     \
            p->next=tail->next;\
            p=p->next;\
         \}\
         return ret;\
         */\
         \
         //way-2\
         if(!head)\
            return NULL;\
         \
         map<RandomListNode *,RandomListNode *> mm;\
         RandomListNode *ret=new RandomListNode(head->label);\
         mm[head]=ret;\
         RandomListNode *p=head->next;\
         RandomListNode *last=ret;\
         while(p)\
         \{\
             RandomListNode *q=new RandomListNode(p->label);\
             mm[p]=q;\
             last->next=q;\
             last=last->next;\
             p=p->next;\
         \}\
         p=head;\
         RandomListNode *k=ret;\
         while(p)\
         \{\
             k->random=mm[p->random];\
             k=k->next;\
             p=p->next;\
         \}\
         return ret;\
    \}\
\};}