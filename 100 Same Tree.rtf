{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given two binary trees, write a function to check if they are equal or not.\
\
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    bool isSameTree(TreeNode* p, TreeNode* q) \
    \{\
        if (!p && !q)    \
            return 1;\
        else if ( (!p) ^ (!q) )\
            return 0;\
        else if (p->val == q->val)\
            return ( isSameTree(p->left, q->left) && isSameTree(p->right, q->right) );\
        else\
            return 0;\
    \}\
\};}