{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a list of non negative integers, arrange them such that they form the largest number.\
\
For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.\
\
Note: The result may be very large, so you need to return a string instead of an integer.\
\

\f1 \'b7\'bd\'b7\'a8\'d2\'bb\'a3\'ba\'a3\'a8\'c3\'bb\'d0\'b4\'b3\'f6\'c0\'b4\'a3\'a9
\f0 \

\f1 \'d3\'c3
\f0 map
\f1 \'c0\'b4\'b4\'e6
\f0  
\f1 \'a3\'ac\'c3\'bf\'d2\'bb\'b8\'f6\'ca\'fd\'ba\'f3\'c3\'e6\'bc\'d3\'d2\'bb\'b8\'f6
\f0 k
\f1 \'a3\'ac\'ca\'c7\'ce\'aa\'c1\'cb
\f0 8
\f1 \'d3\'c5\'cf\'c8\'d3\'da
\f0 80\

\f1 \'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'a3\'a1
\f0 \

\f1 \'d7\'a2\'d2\'e2\'a3\'ba
\f0 map
\f1 \'ca\'c7\'b4\'d3\'d0\'a1\'b5\'c4\'b4\'e6\'b5\'bd\'b4\'f3\'a3\'ac\'c4\'e6\'d0\'f2\'b1\'e9\'c0\'fa\'d0\'e8\'d2\'aa
\f0 \
\
        map<string,int>::reverse_iterator it=pp.rbegin();\
        map<string,int>::reverse_iterator it_end=pp.rend();\
        for(;it!=it_end;it++)\
\

\f1 \'b7\'bd\'b7\'a8\'b6\'fe\'a3\'ba\'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2
\f0 \
\
*/\
class Solution \{\
public:\
    bool is_change(string a, string b)//
\f1 \'c8\'e7\'b9\'fb
\f0 a<b
\f1 \'d4\'f2\'bd\'bb\'bb\'bb
\f0 \
    \{\
        string ab=a+b;\
        string ba=b+a;\
        if (ab < ba)\
            return 1;\
        else\
            return 0;\
    \}\
    \
    string largestNumber(vector<int>& nums) \
    \{\
        //
\f1 \'cf\'c8\'d3\'c3
\f0 map
\f1 \'b5\'c4\'cc\'d8\'d0\'d4\'c5\'c5\'d2\'bb\'b4\'ce\'d0\'f2
\f0 \
        map<string,int> pp;\
        for (int i = 0;i < nums.size(); i++)\
        \{\
            pp[to_string(nums[i])] ++;\
        \}\
        \
        vector<string> num;\
        for(auto it = pp.rbegin();it != pp.rend(); it ++)\
        \{\
            for(int i = 0; i < it->second; i++)\
                num.push_back(it->first);\
        \} \
        \
        //
\f1 \'d4\'d9\'d3\'c3\'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2
\f0 \
        for(int i = 0; i < num.size(); i++)\
        \{\
            for(int j = 0; j < num.size() - i - 1; j++)\
            \{\
                if (is_change(num[j], num[j+1]))\
                    swap(num[j], num[j+1]);\
            \}\
        \}\
        string ret = "";\
        for(int i = 0; i < num.size(); i++)\
            ret += num[i];\
        \
        //
\f1 \'c8\'e7\'b9\'fb\'c8\'ab\'ca\'c7
\f0 0
\f1 \'d4\'f2\'b7\'b5\'bb\'d8
\f0 "0"\
        if (ret[0] == '0')\
            return "0";\
        return ret;  \
    \}\
\};}