{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14240\viewh16060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
There are two sorted arrays nums1 and nums2 of size m and n respectively.\
\
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\
\
Example 1:\
nums1 = [1, 3]\
nums2 = [2]\
\
The median is 2.0\
Example 2:\
nums1 = [1, 2]\
nums2 = [3, 4]\
\
The median is (2 + 3)/2 = 2.5\
\

\f1 \'b6\'d4\'d3\'da\'d2\'bb\'b8\'f6\'b3\'a4\'b6\'c8\'ce\'aa
\f0 n
\f1 \'b5\'c4\'d2\'d1\'c5\'c5\'d0\'f2\'ca\'fd\'c1\'d0
\f0 a
\f1 \'a3\'ac\'c8\'f4
\f0 n
\f1 \'ce\'aa\'c6\'e6\'ca\'fd\'a3\'ac\'d6\'d0\'ce\'bb\'ca\'fd\'ce\'aa
\f0 a[n / 2 + 1] , \
    
\f1 \'c8\'f4
\f0 n
\f1 \'ce\'aa\'c5\'bc\'ca\'fd\'a3\'ac\'d4\'f2\'d6\'d0\'ce\'bb\'ca\'fd
\f0 (a[n / 2] + a[n / 2 + 1]) / 2\
    
\f1 \'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d4\'da\'c1\'bd\'b8\'f6\'ca\'fd\'c1\'d0\'d6\'d0\'c7\'f3\'b3\'f6\'b5\'da
\f0 K
\f1 \'d0\'a1\'b5\'c4\'d4\'aa\'cb\'d8\'a3\'ac\'b1\'e3\'bf\'c9\'d2\'d4\'bd\'e2\'be\'f6\'b8\'c3\'ce\'ca\'cc\'e2
\f0 \
    
\f1 \'b2\'bb\'b7\'c1\'c9\'e8\'ca\'fd\'c1\'d0
\f0 A
\f1 \'d4\'aa\'cb\'d8\'b8\'f6\'ca\'fd\'ce\'aa
\f0 n
\f1 \'a3\'ac\'ca\'fd\'c1\'d0
\f0 B
\f1 \'d4\'aa\'cb\'d8\'b8\'f6\'ca\'fd\'ce\'aa
\f0 m
\f1 \'a3\'ac\'b8\'f7\'d7\'d4\'c9\'fd\'d0\'f2\'c5\'c5\'d0\'f2\'a3\'ac\'c7\'f3\'b5\'da
\f0 k
\f1 \'d0\'a1\'d4\'aa\'cb\'d8
\f0 \
    
\f1 \'c8\'a1
\f0 A[k / 2] B[k / 2] 
\f1 \'b1\'c8\'bd\'cf\'a3\'ac
\f0 \
    
\f1 \'c8\'e7\'b9\'fb
\f0  A[k / 2] > B[k / 2] 
\f1 \'c4\'c7\'c3\'b4\'a3\'ac\'cb\'f9\'c7\'f3\'b5\'c4\'d4\'aa\'cb\'d8\'b1\'d8\'c8\'bb\'b2\'bb\'d4\'da
\f0 B
\f1 \'b5\'c4\'c7\'b0
\f0 k / 2
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0
\f0 (
\f1 \'d6\'a4\'c3\'f7\'b7\'b4\'d6\'a4\'b7\'a8
\f0 )\
    
\f1 \'b7\'b4\'d6\'ae\'a3\'ac\'b1\'d8\'c8\'bb\'b2\'bb\'d4\'da
\f0 A
\f1 \'b5\'c4\'c7\'b0
\f0 k / 2
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'a3\'ac\'d3\'da\'ca\'c7\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'bd\'ab
\f0 A
\f1 \'bb\'f2
\f0 B
\f1 \'ca\'fd\'c1\'d0\'b5\'c4\'c7\'b0
\f0 k / 2
\f1 \'d4\'aa\'cb\'d8\'c9\'be\'c8\'a5\'a3\'ac\'c7\'f3\'ca\'a3\'cf\'c2\'c1\'bd\'b8\'f6\'ca\'fd\'c1\'d0\'b5\'c4
\f0 \
    k - k / 2
\f1 \'d0\'a1\'d4\'aa\'cb\'d8\'a3\'ac\'d3\'da\'ca\'c7\'b5\'c3\'b5\'bd\'c1\'cb\'ca\'fd\'be\'dd\'b9\'e6\'c4\'a3\'b1\'e4\'d0\'a1\'b5\'c4\'cd\'ac\'c0\'e0\'ce\'ca\'cc\'e2\'a3\'ac\'b5\'dd\'b9\'e9\'bd\'e2\'be\'f6
\f0 \
    
\f1 \'c8\'e7\'b9\'fb
\f0  k / 2 
\f1 \'b4\'f3\'d3\'da\'c4\'b3\'ca\'fd\'c1\'d0\'b8\'f6\'ca\'fd\'a3\'ac\'cb\'f9\'c7\'f3\'d4\'aa\'cb\'d8\'b1\'d8\'c8\'bb\'b2\'bb\'d4\'da\'c1\'ed\'d2\'bb\'ca\'fd\'c1\'d0\'b5\'c4\'c7\'b0
\f0 k / 2
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'a3\'ac\'cd\'ac\'c9\'cf\'b2\'d9\'d7\'f7\'be\'cd\'ba\'c3\'a1\'a3
\f0 \
\
*/\
class Solution \{\
public:\
    double findMedianSortedArrays(vector<int>& A, vector<int>& B) \
    \{\
        int k = A.size() + B.size();\
        if (k % 2 == 1)\
            return findKth(A, B, 0, 0, k/2 + 1);\
        else\
            return (findKth(A, B, 0 , 0, k/2) + findKth(A, B, 0, 0, k/2 + 1)) / 2.0;\
    \}\
    \
   //
\f1 \'d5\'d2\'b5\'da
\f0 K
\f1 \'b8\'f6\'d4\'aa\'cb\'d8
\f0 	\
    double findKth(vector<int> &A, vector<int> &B, int A_st, int B_st, int k)\
    \{\
        //exit\
        if (A_st >= A.size())    \
            return B[B_st + k - 1];\
        if (B_st >= B.size())\
            return A[A_st + k - 1];\
        \
        if (k == 1)\
            return min(A[A_st], B[B_st]);\
        //
\f1 \'b9\'fd\'b3\'cc
\f0 \
        \
        int A_key = A_st + k/2 - 1 >= A.size() ? INT_MAX : A[A_st + k/2 - 1];\
        int B_key = B_st + k/2 - 1 >= B.size() ? INT_MAX : B[B_st + k/2 - 1];    \
        \
        if (A_key < B_key)\
            return findKth(A, B, A_st + k/2, B_st, k - k/2);\
        else\
            return findKth(A, B, A_st, B_st + k/2, k - k/2);\
    \}\
\};}