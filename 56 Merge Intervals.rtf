{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a collection of intervals, merge all overlapping intervals.\
\
For example,\
Given [1,3],[2,6],[8,10],[15,18],\
return [1,6],[8,10],[15,18].\
\

\f1 \'b7\'bd\'b7\'a8\'d2\'bb\'a3\'ba\'cf\'c8\'b0\'b4\'d5\'d5
\f0 start
\f1 \'ce\'bb\'d6\'c3\'c5\'c5\'d0\'f2\'a3\'ac\'c8\'bb\'ba\'f3\'b0\'a4\'b8\'f6\'b1\'c8\'bd\'cf\'d3\'eb\'c9\'ed\'ba\'f3\'b5\'c4\'b9\'d8\'cf\'b5\'a3\'ac\'c8\'e7\'b9\'fb\'bf\'c9\'d2\'d4\'ba\'cf\'b2\'a2\'be\'cd\'ba\'cf\'b2\'a2\'a3\'ac\'c8\'bb\'ba\'f3\'c9\'be\'b3\'fd\'ba\'f3\'c3\'e6\'d2\'bb\'b8\'f6\'a1\'a3
\f0 \
\

\f1 \'b7\'bd\'b7\'a8\'b6\'fe\'a3\'ba\'bd\'a8\'c1\'a2\'d2\'bb\'b8\'f6\'d0\'c2\'ca\'fd\'d7\'e9\'a3\'ac\'c8\'bb\'ba\'f3\'cd\'f9\'c0\'ef\'c3\'e6\'b7\'c5\'a3\'ac\'be\'cd\'bf\'c9\'d2\'d4\'b2\'bb\'d3\'c3\'c9\'be\'b3\'fd\'a1\'a3
\f0 \
\
*/\
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */\
 \
bool comp(Interval &a, Interval &b)\
\{\
    return a.start < b.start;\
\}\
class Solution \{\
public:\
    vector<Interval> merge(vector<Interval>& intervals) \
    \{\
        //way-1\
        /*\
        if (intervals.size() == 0)\
            return intervals;\
        sort(intervals.begin(), intervals.end(), comp);\
         \
        for(int i = 0; i < intervals.size() - 1; i++)\
        \{\
            if (intervals[i+1].start > intervals[i].end)\
                continue;\
            else if (intervals[i+1].start <= intervals[i].end)\
            \{\
                intervals[i].end = (intervals[i+1].end > intervals[i].end) ? intervals[i+1].end : intervals[i].end;\
                intervals.erase(intervals.begin() + i + 1);\
                i--;\
            \}\
        \}\
        return intervals;\
        */ \
         \
        //way-2\
        if (intervals.size() == 0)\
            return intervals;\
        sort(intervals.begin(), intervals.end(), comp);\
        vector<Interval> ret;\
        ret.push_back(intervals[0]);\
        for(int i = 1; i < intervals.size(); i++)\
        \{\
            if(intervals[i].start <= ret[ret.size()-1].end)\
                ret[ret.size()-1].end = max(ret[ret.size()-1].end, intervals[i].end);\
            else\
                ret.push_back(intervals[i]);\
        \}\
        return ret;\
         \
    \}\
\};}