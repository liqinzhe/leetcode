{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, determine if it is a valid binary search tree (BST).\
\
Assume a BST is defined as follows:\
\
The left subtree of a node contains only nodes with keys less than the node's key.\
The right subtree of a node contains only nodes with keys greater than the node's key.\
Both the left and right subtrees must also be binary search trees.\
Example 1:\
    2\
   / \\\
  1   3\
Binary tree [2,1,3], return true.\
Example 2:\
    1\
   / \\\
  2   3\
Binary tree [1,2,3], return false.\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    bool check(TreeNode *p, int min, int max)\
    \{\
        if (!p)\
            return 1;\
        else if (p->val > max || p->val < min)  \
            return 0;\
            \
        TreeNode *l = p->left;\
        TreeNode *r = p->right;\
        \
        if ( (l && p->val <= l->val) || (r && p->val >= r->val) )\
            return 0;\
    \
        return (check(l, min, p->val - 1) && check(r, p->val + 1, max));\
    \}\
    \
    bool isValidBST(TreeNode* root) \
    \{\
        return check( root, INT_MIN, INT_MAX );    \
    \} \
\};}