{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\
\
For example:\
Given binary tree [3,9,20,null,null,15,7],\
    3\
   / \\\
  9  20\
    /  \\\
   15   7\
return its level order traversal as:\
[\
  [3],\
  [9,20],\
  [15,7]\
]\
\
\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void guocheng(TreeNode* root,int level,vector<vector<int>> & ret)\
    \{\
        if(!root)\
            return;\
        \
        if (ret.size() <= level)\
        \{\
            vector<int> m1;\
            m1.push_back(root->val);\
            ret.push_back(m1);\
        \}\
        else\
        \{\
           ret[level].push_back(root->val); \
        \}\
        guocheng(root->left, level+1, ret);\
        guocheng(root->right, level+1, ret);\
    \}\
    \
    vector<vector<int>> levelOrder(TreeNode* root) \
    \{\
        //way-1\
        /*\
        vector<vector<int>> ret;\
        guocheng(root, 0, ret);\
        return ret;\
        */\
        \
        //way-2\
        vector<vector<int>> ret;\
        if (!root)\
            return ret;\
            \
        queue<TreeNode*> que;\
        que.push(root);\
        \
        while (!que.empty())\
        \{\
            int size = que.size();\
            vector<int> temp;\
            for (int i = 0; i < size; i++)\
            \{\
                TreeNode *p = que.front();\
                que.pop();\
                temp.push_back(p->val);\
                if (p->left)\
                    que.push(p->left);\
                if (p->right)\
                    que.push(p->right);\
            \}\
            ret.push_back(temp);\
        \}\
        return ret;\
    \}\
\};}