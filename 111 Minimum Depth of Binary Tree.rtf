{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, find its minimum depth.\
\
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\
\
\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    int minDepth(TreeNode* root) \
    \{\
        int mindeep;\
        if(!root)\
            return 0;\
        else if (!root->left && !root->right)\
            return 1;\
        else if (!root->left)    \
            mindeep = minDepth(root->right) + 1;\
        else if (!root->right)    \
            mindeep = minDepth(root->left) + 1;     \
        else\
            mindeep = min( minDepth(root->left), minDepth(root->right) ) + 1;\
        \
        return mindeep;        \
    \}\
\};}