{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array of non-negative integers, you are initially positioned at the first index of the array.\
\
Each element in the array represents your maximum jump length at that position.\
\
Determine if you are able to reach the last index.\
\
For example:\
A = [2,3,1,1,4], return true.\
\
A = [3,2,1,0,4], return false.\
\

\f1 \'b7\'bd\'b7\'a8\'b6\'fe\'a3\'ba\'cc\'b0\'d0\'c4\'cb\'e3\'b7\'a8\'a3\'ac\'b2\'bb\'d3\'c3
\f0 vector\
\
*/\
class Solution \{\
public:\
    bool canJump(vector<int>& nums) \
    \{\
        //way-2\
        int maxsize = 0;\
        for (int i = 0; i < nums.size() - 1 && i <= maxsize; i++)\
           maxsize = max(maxsize, i + nums[i]);\
        if (maxsize >= nums.size() - 1)\
            return true;\
        return false;\
    \}\
\};}