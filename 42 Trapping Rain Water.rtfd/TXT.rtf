{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fnil\fcharset134 STHeitiSC-Light;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15680\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
/*\
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Â±èÂπïÂø´ÁÖß 2017-05-08 ‰∏äÂçà9.31.06.png \width9180 \height3380
}¨}
\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 For example, \
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.\
\
\'cc\'e2\'c4\'bf\'b5\'c4\'d2\'e2\'cb\'bc\'be\'cd\'ca\'c7\'a3\'ba\'c3\'bf\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'d6\'b4\'fa\'b1\'ed\'d2\'bb\'b8\'f6\'ca\'f7\'c1\'a2\'b5\'c4\'c4\'be\'bf\'e9\'a3\'ac\'ba\'cf\'c6\'f0\'c0\'b4\'bf\'c9\'d2\'d4\'ca\'a2\'b6\'e0\'c9\'d9\'cb\'ae\
\
\'b7\'bd\'b7\'a8\'d2\'bb\'a3\'ba\'b5\'dd\'b9\'e9\'a1\'a3\
      1\'a1\'a2\'d5\'d2\'d7\'ee\'b8\'df\'b5\'c4\'c4\'c7\'b8\'f6\'a3\'ac\'cf\'c2\'b1\'ea\'ce\'aai\
      2\'a1\'a2i\'b5\'c4\'d7\'f3\'d3\'d2\'b7\'d6\'b1\'f0\'d5\'d2\'d7\'ee\'b8\'df\
      3\'a1\'a2\'cd\'f9\'d7\'f3\'d3\'d2\'b5\'fc\'b4\'fa\
\
\'b7\'bd\'b7\'a8\'b6\'fe\'a3\'ba\
\
\'d5\'e2\'b5\'c0\'cc\'e2\'b5\'c4\'cb\'bc\'c2\'b7\'ca\'c7\'b2\'c9\'d3\'c3l\'ba\'cdr\'c1\'bd\'b8\'f6\'d6\'b8\'d5\'eb\'a3\'ac\'ce\'ac\'bb\'a4\'d7\'b0\'cb\'ae\'c1\'bd\'b1\'df\'b5\'c4\'ce\'bb\'d6\'c3\'a1\'a3\
\
\'b5\'b1l\'b4\'a6\'b8\'df\'b6\'c8\'b5\'cd\'ca\'b1\'a3\'ac\'cb\'b5\'c3\'f7l\'d3\'d2\'b2\'e0\'d7\'b0\'b5\'c4\'cb\'ae\'bf\'cf\'b6\'a8\'ba\'cdl\'b4\'a6\'d2\'bb\'d1\'f9\'b8\'df\'a3\'ac\'b4\'cb\'ca\'b1\'d6\'f0\'b2\'bd\'d3\'d2\'d2\'c6l\'a3\'ac\'cd\'ac\'ca\'c7\'bc\'d3\'c9\'cfl\'b4\'a6\'d3\'eb\'d3\'d2\'d2\'c6\'ba\'f3\'ce\'bb\'d6\'c3\'b8\'df\'b6\'c8\'b2\'ee\'a3\'a8\'d2\'f2\'ce\'aa\'d5\'e2\'c0\'ef\'b6\'bc\'c4\'dc\'d7\'b0\'cb\'ae\'b0\'a1\'a3\'a9\'a3\'ac\'d6\'b1\'b5\'bd\'d4\'d9\'d3\'f6\'b5\'bd\'cd\'ac\'d1\'f9\'b8\'df\'bb\'f2\'d5\'df\'b8\'fc\'b8\'df\'b5\'c4\'ce\'bb\'d6\'c3\'a1\'a3\'c8\'bb\'ba\'f3\'bd\'f8\'d0\'d0\'cf\'c2\'d2\'bb\'c2\'d6\'c5\'d0\'b6\'cf\'a1\'a3\
\
\'cd\'ac\'d1\'f9\'a3\'ac\'b5\'b1r\'b4\'a6\'b8\'df\'b6\'c8\'b5\'cd\'ca\'b1\'a3\'ac\'cb\'b5\'c3\'f7r\'d7\'f3\'b2\'e0\'b5\'c4\'cb\'ae\'bf\'cf\'b6\'a8\'ba\'cdr\'b4\'a6\'d2\'bb\'d1\'f9\'b8\'df\'a3\'ac\'b4\'cb\'ca\'b1\'d6\'f0\'b2\'bd\'d7\'f3\'d2\'c6r\'a3\'ac\'cd\'ac\'ca\'c7\'bc\'d3\'c9\'cfr\'b4\'a6\'d3\'eb\'d7\'f3\'d2\'c6\'ba\'f3\'ce\'bb\'d6\'c3\'b8\'df\'b6\'c8\'b2\'ee\'a3\'ac\'d6\'b1\'b5\'bd\'d4\'d9\'d3\'f6\'b5\'bd\'cd\'ac\'d1\'f9\'b8\'df\'bb\'f2\'d5\'df\'b8\'fc\'b8\'df\'b5\'c4\'ce\'bb\'d6\'c3\
\
\'d7\'ee\'ba\'f3\'d6\'b1\'b5\'bdl\'ba\'cdr\'cf\'e0\'d3\'f6\'a3\'ac\'bd\'e1\'ca\'f8\'a1\'a3\
\
\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'a3\'baO(n)\
\
\'bf\'d5\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'a3\'baO(1)\
\
*/\
class Solution \{\
public:\
    int findleft(vector<int>& height,int flag,int sum)\
    \{\
        int ff;\
        int max=0;\
        for(int i=0;i<flag;i++)\
        \{\
            if(height[i]>max)\
            \{\
                max=height[i];\
                ff=i;\
            \}\
        \}\
            \
        if(max==0)\
            return sum;\
            \
        for(int i=ff+1;i<flag;i++)\
            sum+=height[ff]-height[i];\
            \
        sum=findleft(height,ff,sum);\
        return sum;\
    \}   \
    \
    int findright(vector<int>& height,int flag,int sum)\
    \{\
        int ff;\
        int max=0;\
        \
        for(int i=flag+1;i<height.size();i++)\
        \{\
            if(height[i]>max)\
            \{\
                max=height[i];\
                ff=i;\
            \}\
        \}\
            \
        if(max==0)\
            return sum;\
              \
        for(int i=flag+1;i<ff;i++)\
            sum=sum+height[ff]-height[i];\
                \
        sum=findright(height,ff,sum);\
        return sum;\
    \}\
    \
    int trap(vector<int>& height) \
    \{\
        //way-1\
        /*\
        int max=0;\
        int flag=-1;\
        for(int i=0;i<height.size();i++)\
        \{\
            if(height[i]>max)\
            \{\
                max=height[i];\
                flag=i;\
            \} \
        \}\
        int sum=0;\
        \
        sum=findleft(height,flag,sum);\
        sum=findright(height,flag,sum);\
        \
        return sum; \
        */\
        \
        //way-2\
        \
        int n=height.size();\
        int l=0,r=n-1,res=0,minh;\
        \
        while(l<r)\
        \{\
            minh=min(height[l],height[r]);\
            if(height[l]==minh)\
            \{\
                while(++l<r && height[l]<minh)\
                \{\
                    res+=minh-height[l];\
                \}\
            \}\
            else\
            \{\
                while(l<--r && height[r]<minh)\
                \{\
                    res+=minh-height[r];   \
                \}\
            \}\
        \}\
        \
        return res;\
    \}\
\};}