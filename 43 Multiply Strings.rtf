{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\
\
Note:\
\
The length of both num1 and num2 is < 110.\
Both num1 and num2 contains only digits 0-9.\
Both num1 and num2 does not contain any leading zero.\
You must not use any built-in BigInteger library or convert the inputs to integer directly.\
\

\f1 \'c1\'bd\'b8\'f6\'d7\'d6\'b7\'fb\'b4\'ae\'cf\'e0\'b3\'cb\'a3\'ac\'b0\'d1\'d2\'bb\'b8\'f6\'ca\'fd\'b2\'f0\'b7\'d6\'ce\'aa\'c3\'bf\'d2\'bb\'ce\'bb\'a3\'ac\'b5\'c3\'b5\'bd\'b5\'c4\'bd\'e1\'b9\'fb\'d4\'d9\'cf\'e0\'bc\'d3\'a1\'a3
\f0 \
\
*/\
class Solution \{\
public:\
	string multiply(string num1, string num2)\
	\{\
		string m1;\
		if (num1.size() < num2.size())\
		\{\
			m1 = num1;\
			num1 = num2;\
			num2 = m1;\
		\}\
        m1="";\
        \
		vector<vector<int>> result;\
		vector<int> kk;\
		int tt = 0;\
		for (int i = num2.size() - 1; i >= 0; i--)\
		\{\
			for (int h = i; h < num2.size() - 1; h++)\
				kk.push_back(0);\
\
			for (int j = num1.size() - 1; j >= 0; j--)\
			\{\
				kk.push_back(((int(num2[i]) - 48)*(int(num1[j]) - 48)) % 10 + tt);\
				tt = ((int(num2[i]) - 48)*(int(num1[j]) - 48)) / 10;\
			\}\
			if (tt != 0)\
			\{\
				kk.push_back(tt);\
				tt = 0;\
			\}\
			result.push_back(kk);\
			kk.clear();\
		\}\
\
		int maxa = 0;\
		for (int i = 0; i < result.size(); i++)\
			maxa=max(maxa,result[i].size());\
			\
\
		for (int i = 0; i < result.size(); i++)\
		\{\
			tt = result[i].size();\
			for (int p = tt; p < maxa; p++)\
				result[i].push_back(0);\
		\}\
\
		tt = 0;\
		int flag = 0;\
		for (int p = 0; p < maxa; p++)\
		\{\
			tt = flag;\
			for (int i = 0; i < result.size(); i++)\
			\{\
				tt = result[i][p] + tt;\
			\}\
			kk.push_back(tt % 10);\
			flag = tt / 10;\
		\}\
		if(flag!=0)\
		\{ \
			kk.push_back(flag);\
			flag = 0;\
		\}\
		for (int i = kk.size() - 1; i >= 0; i--)\
		\{\
			if (kk[i] == 0 && flag == 0)\
				continue;\
			else\
			\{\
				m1 = m1 + char(kk[i] + 48);\
				flag = 1;\
			\}\
\
		\}\
		if (m1 != "")\
			return m1;\
		else\
			return "0";\
	\}\
\};}