{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab420
\pard\pardeftab420\ri0\qj\partightenfactor0

\f0\fs24 \cf0 /*
\f1 \

\f0   Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum \uc0\u8805  s. If there isn't one, return 0 instead.
\f1 \
\

\f0 For example, given the array [2,3,1,2,4,3] and s = 7,
\f1 \

\f0 the subarray [4,3] has the minimal length under the problem constraint.
\f1 \

\f0   
\f1 \

\f0   
\f2 \'b7\'a8\'b6\'fe\'a3\'ba\'c1\'bd\'b8\'f6\'d6\'b8\'d5\'eb\'a3\'ac\'d2\'c6\'b6\'af
\f1 \
\

\f0 */
\f1 \

\f0 class Solution \{
\f1 \

\f0 public:
\f1 \

\f0     int minSubArrayLen(int s, vector<int>& nums) 
\f1 \

\f0     \{        
\f1 \

\f0         //way-2
\f1 \

\f0         int first = 0, second = -1;\
        int sum = 0;\
        int length = nums.size();\
        int ret = length + 1;\
        while (first < length && second < length)\
        \{\
           //second
\f2 \'ba\'f3\'d2\'c6\'a3\'ac\'d6\'b1\'b5\'bd
\f0 sum
\f2 \'b3\'ac\'b9\'fd
\f0 s \
            while(sum < s && second < length)\
            \{\
               sum += nums[++second];\
            \}       \
           \
            if (second == length)\
                break;\
            //first
\f2 \'ba\'f3\'d2\'c6\'a3\'ac\'d6\'b1\'b5\'bd
\f0 sum
\f2 \'d0\'a1\'d3\'da
\f0 s   \
            while (sum >= s)      \
            \{\
               ret =  min(ret, second - first + 1);\
               sum -= nums[first++];\
            \}      \
        \}\
        if (ret == length + 1)\
           return -1;\
        return ret;
\f1 \

\f0         
\f1 \

\f0     \}
\f1 \

\f0 \};
\f1 \
}