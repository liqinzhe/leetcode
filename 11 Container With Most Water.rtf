{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset134 STSongti-SC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab420
\pard\pardeftab420\ri0\qj\partightenfactor0

\f0\fs24 \cf0 /*\
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\
\
Note: You may not slant the container and n is at least 2.\
\
\pard\pardeftab420\ri0\qj\partightenfactor0

\f1 \cf0 \'cc\'e2\'c4\'bf\'d2\'aa\'c7\'f3\'a3\'ba\'c7\'f3\'b0\'fc\'ba\'ac\'b5\'c4\'c3\'e6\'bb\'fd
\f0 ,
\f1 \'d3\'c3\'c1\'bd\'b8\'f6\'d6\'b8\'d5\'eb
\f0 l
\f1 \'ba\'cd
\f0 r
\f1 \'a3\'ac\'b3\'f5\'ca\'bc\'bb\'af\'b7\'d6\'b1\'f0\'d6\'b8\'cf\'f2\'ca\'fd\'d7\'e9\'b5\'c4\'c1\'bd\'b6\'cb\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'da\'cf\'f2\'d6\'d0\'bc\'e4\'d2\'c6\'b6\'af\'d5\'d2\'b5\'bd\'d7\'ee\'b4\'f3\'c8\'dd\'c1\'bf\'a1\'a3\'c8\'e7\'b9\'fb
\f0 l
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'ca\'fd\'d7\'d6\'d0\'a1\'a3\'ac\'d4\'f2
\f0 l
\f1 \'d0\'e8\'d2\'aa\'d3\'d2\'d2\'c6\'b2\'c5\'d3\'d0\'bf\'c9\'c4\'dc\'bb\'f1\'b5\'c3\'b8\'fc\'b4\'f3\'c8\'dd\'c1\'bf\'a3\'ac\'d2\'f2\'ce\'aa\'b4\'cb\'ca\'b1\'c8\'e7\'b9\'fb\'d7\'f3\'d2\'c6
\f0 r
\f1 \'a3\'ac\'b5\'c3\'b5\'bd\'b5\'c4\'c8\'dd\'c1\'bf\'bf\'cf\'b6\'a8\'b1\'c8\'d7\'f3\'d2\'c6
\f0 r
\f1 \'d6\'ae\'c7\'b0\'b5\'c4\'c8\'dd\'c1\'bf\'d0\'a1\'a3\'a8\'b8\'df\'b6\'c8\'d2\'d1\'be\'ad\'b1\'bb\'bd\'cf\'d0\'a1\'b5\'c4
\f0 l
\f1 \'cf\'de\'d6\'c6\'d7\'a1\'c1\'cb\'a3\'a9\'a1\'a3\'c8\'e7\'b9\'fb
\f0 r
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'ca\'fd\'d7\'d6\'d0\'a1\'a3\'ac\'d4\'f2\'d0\'e8\'d2\'aa\'d7\'f3\'d2\'c6
\f0 r
\f1 \'a1\'a3\'d5\'e2\'d1\'f9\'a3\'ac\'b5\'b1
\f0 l
\f1 \'ba\'cd
\f0 r
\f1 \'cf\'e0\'d3\'f6\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'d7\'ee\'b4\'f3\'b5\'c4\'c8\'dd\'c1\'bf\'be\'cd\'ca\'c7\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'b5\'c4\'a1\'a3
\f0 \
\

\f1 \'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'a3\'ba
\f0 O(n)\
\

\f1 \'bf\'d5\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'a3\'ba
\f0 O(1)\
\
\
*/\
class Solution \{\
public:\
    int maxArea(vector<int>& height) \
    \{\
       int m1=0;\
       int m2=height.size()-1;\
       int high,mm;\
       int maxa=0;\
       while(m1<m2)\
       \{\
          high=min(height[m1],height[m2]);\
          maxa=max(maxa,high*(m2-m1));\
          if(height[m1]>height[m2])\
          \{\
              m2--;\
          \}\
          else\
          \{\
              m1++;\
          \}\
       \}\
       return maxa;\
    \}\
\};\
\
python
\f2 \'a3\'ba
\f0 \
class Solution(object):\
    def maxArea(self, height):\
        """\
        :type height: List[int]\
        :rtype: int\
        """\
        l = 0\
        r = len(height) - 1\
        ret = 0\
        while l < r:     \
            last = min(height[l], height[r])\
            ret = max(ret, last * (r - l))\
            if height[l] < height[r]:\
                while l < r and height[l] <= last:\
                    l += 1\
            else:\
                while l < r and height[r] <= last:\
                    r -= 1\
        return ret}