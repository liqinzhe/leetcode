{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
iven an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.\
\
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].\
\
Note:\
You must do this in-place without making a copy of the array.\
Minimize the total number of operations.\
\

\f1 \'cf\'c8\'b0\'d1\'b7\'c7
\f0 0
\f1 \'cd\'f9\'c7\'b0\'ed\'a1\

\f0 \
*/\
class Solution \{\
public:\
    void moveZeroes(vector<int>& nums) \
    \{\
        //move non-zero to front\
        int next_non_zero = 0;\
        int p = 0;\
        while (p != nums.size())\
        \{\
            if ( nums[p] != 0 )\
                swap(nums[p], nums[next_non_zero++]);\
            p++;\
        \}\
    \}\
\};}