{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16660\viewh19040\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a collection of numbers that might contain duplicates, return all possible unique permutations.\
\
For example,\
[1,1,2] have the following unique permutations:\
[\
  [1,1,2],\
  [1,2,1],\
  [2,1,1]\
]\
\
backtracking!\

\f1 \'be\'df\'cc\'e5\'ca\'c7
\f0  
\f1 \'cf\'c8\'b0\'d1\'c3\'bf\'d2\'bb\'ce\'bb\'b5\'c4\'c7\'e9\'bf\'f6\'b2\'e5\'c8\'eb\'bd\'f8\'c8\'a5\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'d9\'c0\'ad\'b3\'f6\'c0\'b4\'a3\'ac
\f0 \

\f1 \'b0\'d1
\f0 num[pos]
\f1 \'b2\'e5\'c8\'eb\'b5\'bd\'d5\'e2\'b8\'f6
\f0 result[i]
\f1 \'b5\'c4\'c3\'bf\'d2\'bb\'b8\'f6\'ce\'bb\'d6\'c3
\f0 \
\
*/\
class Solution \{\
public:\
    //
\f1 \'d6\'d8\'d0\'b4\'ba\'af\'ca\'fd\'b5\'fc\'b4\'fa\'a3\'ac\'d6\'d8\'b8\'b4\'b5\'c4\'d6\'bb\'c4\'dc\'b2\'e5\'d4\'da\'c7\'b0\'d2\'bb\'b8\'f6\'ba\'f3\'c3\'e6\'a3\'a1
\f0 \
    void charu(vector<vector<int>> &result,vector<int>& nums,int pos)\
    \{\
        vector<int> mm;\
        \
        int kk=result.size(); //
\f1 \'b1\'d8\'d0\'eb\'bd\'f8\'c8\'eb\'ba\'af\'ca\'fd\'be\'cd\'b6\'a8kk\'a3\'ac\'d2\'f2\'ce\'aaresult.size()\'bb\'e1\'b1\'e4\'bb\'af
\f0 \
        int hh=result[0].size();\
        \
        if(nums[pos]==nums[pos-1]) \
        \{   \
            int flag=-1;\
            for(int i=0;i<kk;i++)\
            \{\
                for(int j=hh-1;j>=0;j--)//
\f1 \'d5\'d2\'c9\'cf\'d2\'bb\'b8\'f6\'b5\'c4\'ce\'bb\'d6\'c3\'a3\'ac\'d4\'da\'ba\'f3\'c3\'e6\'b2\'e5
\f0 \
                \{\
                    if(result[i][j]==nums[pos])\
                    \{\
                        flag=j;\
                        break;\
                    \}\
                \}\
                //
\f1 \'b2\'e5\'c8\'eb
\f0 \
                for(int p=flag+1;p<hh;p++)\
                \{\
                    mm=result[i];\
                    mm.insert(mm.begin()+p,nums[pos]);\
                    result.push_back(mm);\
                \}\
                result[i].push_back(nums[pos]);//
\f1 \'d7\'ee\'ba\'f3\'c3\'e6\'b2\'e5\'c8\'eb\'b5\'c4\'c7\'e9\'bf\'f6
\f0 \
                \
                flag=-1;\
            \}\
        \}\
        else\
        \{\
            for(int i=0;i<kk;i++)//
\f1 \'b0\'d1\'c3\'bf\'d2\'bb\'b8\'f6\'d2\'d1\'be\'ad\'b7\'c5\'d4\'da
\f0 result
\f1 \'c0\'ef\'c3\'e6\'b5\'c4\'c4\'c3\'b3\'f6\'c0\'b4
\f0 \
            \{\
                //
\f1 \'b2\'bb\'d3\'c3\'d5\'d2\'ce\'bb\'d6\'c3\'a3\'ac\'d6\'b1\'bd\'d3\'b2\'e5\'c8\'eb\'a3\'ac\'d4\'da\'c3\'bf\'d2\'bb\'ce\'bb\'b5\'c4\'ba\'f3\'c3\'e6\'b6\'bc\'b2\'e5\'c8\'eb\'d2\'bb\'b4\'ce
\f0 \
                for(int p=0;p<hh;p++)\
                \{\
                    mm=result[i];\
                    mm.insert(mm.begin()+p,nums[pos]);\
                    result.push_back(mm);\
                \}\
                result[i].push_back(nums[pos]);//
\f1 \'d7\'ee\'ba\'f3\'c3\'e6\'b2\'e5\'c8\'eb\'b5\'c4\'c7\'e9\'bf\'f6
\f0 \
            \}\
        \}\
        \
        if((pos+1)!=nums.size())\
            charu(result,nums,pos+1);\
    \}\
    \
    vector<vector<int>> permuteUnique(vector<int>& nums) \
    \{\
        sort(nums.begin(),nums.end());\
       \
        vector<int> mm;\
        mm.push_back(nums[0]);\
        vector<vector<int>> result;\
        result.push_back(mm);\
       \
        if(nums.size()>1)\
            charu(result,nums,1);\
                    \
        return result;   \
    \}\
\};}