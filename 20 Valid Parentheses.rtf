{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a string containing just the characters '(', ')', '\{', '\}', '[' and ']', determine if the input string is valid.\
\
The brackets must close in the correct order, "()" and "()[]\{\}" are all valid but "(]" and "([)]" are not.\
\
way-1:use string and stack mode\
\
way-2:stack\
\
*/\
class Solution \{\
public:\
    bool isValid(string s) \
    \{\
        //way-1\
        /*\
        if(s.size()%2!=0)\
            return false;\
        else if(s.size()==0)\
            return true;\
        \
        string kk=s.substr(0,1);\
        for(int i=1;i<s.size();i++)\
        \{\
            if(s[i]==']' && kk[kk.size()-1]=='[')\
                kk=kk.substr(0,kk.size()-1);\
            else if(s[i]=='\}' && kk[kk.size()-1]=='\{')\
                kk=kk.substr(0,kk.size()-1);  \
            else if(s[i]==')' && kk[kk.size()-1]=='(')\
                kk=kk.substr(0,kk.size()-1);  \
            else\
                kk=kk+s[i];\
        \}\
        if(kk.size()==0)\
            return true;\
        else\
            return false;\
        */\
        \
        //way-2\
        \
        if(s.size()==0)\
            return 1;\
        stack<char> pp;\
        pp.push(s[0]);\
        int i=1;\
        while(i<s.size())\
        \{\
            if(!pp.empty())\
            \{\
                char k=pp.top();\
                if((s[i]==']' && k=='[') || (s[i]=='\}' && k=='\{') || (s[i]==')' && k=='('))\
                    pp.pop();\
                else\
                \{\
                    pp.push(s[i]);\
                \}\
            \} \
            else\
            \{\
                pp.push(s[i]);\
            \}\
            i++;\
        \}\
        if(pp.empty())\
            return 1;\
        else\
            return 0;\
    \}\
\};}