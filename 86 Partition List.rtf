{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\
\
You should preserve the original relative order of the nodes in each of the two partitions.\
\
For example,\
Given 1->4->3->2->5->2 and x = 3,\
return 1->2->2->4->3->5.\
\
way-1:use 2 vector save value\
\
way-2:change list\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* partition(ListNode* head, int x) \
    \{\
        //way-1\
        /*\
        vector<int> xiao;\
        vector<int> da;\
        ListNode *p=head;\
        while(p)\
        \{\
            if(p->val<x)\
                xiao.push_back(p->val);\
            else\
                da.push_back(p->val);\
            p=p->next; \
        \}\
        p=head;\
        for(int i=0;i<xiao.size();i++)\
        \{\
            p->val=xiao[i];\
            p=p->next;\
        \}\
        for(int i=0;i<da.size();i++)\
        \{\
            p->val=da[i];\
            p=p->next;\
        \}\
        return head; \
        */\
        \
        //way-2\
        if(!head)   \
            return head;\
        ListNode hhead(-1);\
        hhead.next=head;\
        ListNode *small=&hhead;\
        \
        ListNode *p=small;\
        ListNode *q=head;\
        \
        while(q)\
        \{\
            if(q->val<x)\
            \{\
                if(small!=p)\
                \{\
                    p->next=q->next;\
                    q->next=small->next;\
                    small->next=q;\
                    small=q;\
                    q=p->next;\
                \}\
                else\
                \{\
                    small=q;\
                    p=q;\
                    q=q->next;\
                \}\
            \}\
            else\
            \{\
                p=q;\
                q=q->next;\
            \}\
        \}\
        return hhead.next;\
    \}\
\};}