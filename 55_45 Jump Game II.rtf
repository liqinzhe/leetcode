{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array of non-negative integers, you are initially positioned at the first index of the array.\
\
Each element in the array represents your maximum jump length at that position.\
\
Your goal is to reach the last index in the minimum number of jumps.\
\
For example:\
Given array A = [2,3,1,1,4]\
\
The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\
\
Note:\
You can assume that you can always reach the last index.\
\
way-1:
\f1 \'d3\'c3
\f0 vector
\f1 \'c0\'b4\'b4\'e6\'b5\'bd\'b4\'ef
\f0 i
\f1 \'b5\'c4\'b2\'bd\'ca\'fd
\f0 \
\
way-2:(copy)\
ret:
\f1 \'c4\'bf\'c7\'b0\'ce\'aa\'d6\'b9\'b5\'c4
\f0 jump
\f1 \'ca\'fd
\f0 \
\
curRch:
\f1 \'b4\'d3
\f0 A[0]
\f1 \'bd\'f8\'d0\'d0
\f0 ret
\f1 \'b4\'ce
\f0 jump
\f1 \'d6\'ae\'ba\'f3\'b4\'ef\'b5\'bd\'b5\'c4\'d7\'ee\'b4\'f3\'b7\'b6\'ce\'a7
\f0 \
\
curMax:
\f1 \'b4\'d3
\f0 0~i
\f1 \'d5\'e2
\f0 i+1
\f1 \'b8\'f6
\f0 A
\f1 \'d4\'aa\'cb\'d8\'d6\'d0\'c4\'dc\'b4\'ef\'b5\'bd\'b5\'c4\'d7\'ee\'b4\'f3\'b7\'b6\'ce\'a7
\f0 \
\

\f1 \'b5\'b1
\f0 curRch < i
\f1 \'a3\'ac\'cb\'b5\'c3\'f7
\f0 ret
\f1 \'b4\'ce
\f0 jump
\f1 \'d2\'d1\'be\'ad\'b2\'bb\'d7\'e3\'d2\'d4\'b8\'b2\'b8\'c7\'b5\'b1\'c7\'b0\'b5\'da
\f0 i
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'d2\'f2\'b4\'cb\'d0\'e8\'d2\'aa\'d4\'f6\'bc\'d3\'d2\'bb\'b4\'ce
\f0 jump
\f1 \'a3\'ac\'ca\'b9\'d6\'ae\'b4\'ef\'b5\'bd
\f0 \
\

\f1 \'bc\'c7\'c2\'bc\'b5\'c4
\f0 curMax
\f1 \'a1\'a3
\f0 \
\
*/\
class Solution \{\
public:\
    int jump(vector<int>& nums) \
    \{\
        //way-1\
        if (nums.size() < 2)\
            return 0;\
       \
        vector<int> steps(nums.size(), 0);\
        \
        int maxsize = 0;\
        for (int i = 0; i < nums.size() - 1; i ++)\
        \{\
            if (i + nums[i] <= maxsize)\
                continue;\
            else if (i + nums[i] >= nums.size() - 1)\
                return steps[i] + 1; \
            else\
                for (int j = maxsize + 1; j <= i + nums[i]; j ++)\
                    steps[j] = steps[i] + 1;\
            maxsize = i + nums[i];\
        \} \
        return steps[nums.size()-1];\
        \
        \
        //way-2\
        /*\
        int ret = 0;\
        int curMax = 0;\
        int curRch = 0;\
        for(int i = 0; i < nums.size(); i ++)\
        \{\
            if(curRch < i)\
            \{\
                ret ++;\
                curRch = curMax;\
            \}\
            curMax = max(curMax, nums[i]+i);\
        \}\
        return ret;\
        */\
    \}\
\};}