{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17800\viewh17400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.\
\
You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.\
\
Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\
\
For the last line of text, it should be left justified and no extra space is inserted between words.\
\
For example,\
words: ["This", "is", "an", "example", "of", "text", "justification."]\
L: 16.\
\
Return the formatted lines as:\
[\
   "This    is    an",\
   "example  of text",\
   "justification.  "\
]\
Note: Each word is guaranteed not to exceed L in length.\
\
*/\
class Solution \{\
public:\
    vector<string> fullJustify(vector<string>& words, int max) \
    \{  \
        vector<string> result;\
        vector<int> row;\
        vector<int> kong;\
        row.push_back(0);
\f1 //\'c3\'bf\'d0\'d0\'b4\'e6\'b6\'e0\'c9\'d9\'b8\'f6str
\f0 \
        kong.push_back(0);//
\f1 \'d5\'e2\'d0\'a9str\'d2\'bb\'b9\'b2\'d5\'bc\'b6\'e0\'c9\'d9\'b8\'f1\'d7\'d3
\f0 \
        int count=0;\
        for(int i=0;i<words.size();i++)\
        \{\
            if(count==0 && words[i].size()<=max)\
            \{  \
                row[row.size()-1]++;\
                kong[kong.size()-1]+=words[i].size();\
                count=words[i].size();\
            \}\
            else if(count!=0 && words[i].size()+count+1<=max)\
            \{\
                row[row.size()-1]++;\
                kong[kong.size()-1]+=words[i].size();\
                count=count+1+words[i].size();\
            \}\
            else//
\f1 \'b1\'be\'d0\'d0\'b4\'e6\'b2\'bb\'cf\'c2\'c1\'cb
\f0 \
            \{\
                row.push_back(0);\
                kong.push_back(0);\
                count=0;\
                i--;\
            \}\
        \}\
        \
        string m1="";\
        int k=0;\
        int kongge;\
        int duoyu;\
        for(int i=0;i<row.size()-1;i++)\
        \{\
            kongge=max-kong[i];//
\f1 \'c3\'bf\'d2\'bb\'d0\'d0\'d0\'e8\'d2\'aa\'bc\'d3\'b5\'c4\'bf\'d5\'b8\'f1\'ca\'fd\'c4\'bf
\f0 \
            if(row[i]>1)    \
            \{    \
                duoyu=kongge%(row[i]-1);\
                kongge=kongge/(row[i]-1);\
                row[i]=row[i]+k;\
                while(k<row[i] && k<words.size())\
                \{\
                    m1=m1+words[k]; \
                \
                    if(k!=row[i]-1) \
                        for(int j=0;j<kongge;j++)\
                            m1=m1+" ";\
                  \
                    if(duoyu>0)\
                    \{\
                        m1=m1+" ";\
                        duoyu--;\
                    \}\
                    k++;\
                \}\
            \}\
            else\
            \{\
                m1=words[k]; \
                k++; \
                for(int j=0;j<kongge;j++) \
                    m1=m1+" ";\
            \}\
            result.push_back(m1);\
            m1.clear();\
        \}\
        \
        //
\f1 \'d7\'ee\'ba\'f3\'d2\'bb\'d0\'d0
\f0 \
        while(k<words.size())\
        \{\
            m1=m1+words[k]; \
            if(k!=words.size()-1)\
                m1=m1+" ";\
            k++;\
        \}\
        //cout<<max-kong[kong.size()-1]<<endl;\
        for(int h=0;h<max-kong[kong.size()-1]+1-row[row.size()-1];h++)\
            m1=m1+" ";\
        result.push_back(m1);\
       \
        return result;\
    \}\
\};}