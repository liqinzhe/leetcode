{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\
\
You may assume that the intervals were initially sorted according to their start times.\
\
Example 1:\
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].\
\
Example 2:\
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].\
\
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].\
\
way-1 : 
\f1 \'cf\'c8\'b0\'d1\'d0\'c2\'b5\'c4\'b2\'e5\'c8\'eb\'a3\'ac\'c8\'bb\'ba\'f3\'ba\'cf\'b2\'a2\'d3\'c3
\f0 merge\
\
way-2:
\f1 \'b2\'bb\'c5\'c5\'d0\'f2\'a3\'ac\'d6\'b1\'bd\'d3\'b2\'e5\'c8\'eb\'a1\'a3\'b7\'d6\'b1\'f0\'b4\'a6\'c0\'ed\'ba\'c3
\f0  
\f1 \'b2\'e5\'c8\'eb\'d7\'f3\'b1\'df\'a3\'ac\'b2\'e5\'c8\'eb\'d6\'d0\'bc\'e4\'a3\'ac\'b2\'e5\'c8\'eb\'d3\'d2\'b1\'df\'b5\'c4\'c7\'e9\'bf\'f6\'be\'cd\'d0\'d0\'a3\'a1
\f0 \
\
*/\
\
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */ \
 bool comp(Interval &a,Interval &b)\
 \{\
      return a.start<b.start; \
 \}\
class Solution \{\
public:\
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) \
    \{\
        \
         \
        //way-1\
        /*\
        intervals.push_back(newInterval);\
        return merge(intervals);\
        */\
         \
        //way-2\
        vector<Interval> ret;\
        int k=0;\
         \
        while (k < intervals.size() && intervals[k].end < newInterval.start)\
            ret.push_back(intervals[k++]);\
         \
        ret.push_back(newInterval);\
        while (k < intervals.size() && intervals[k].start <= ret[ret.size()-1].end)\
        \{\
            ret[ret.size()-1].start = min(ret[ret.size()-1].start,intervals[k].start);\
            ret[ret.size()-1].end = max(ret[ret.size()-1].end,intervals[k].end);\
            k++;\
        \}\
         \
        while (k < intervals.size())\
            ret.push_back(intervals[k++]);\
             \
        return ret;     \
    \}\
    \
    vector<Interval> merge(vector<Interval>& intervals) \
    \{\
        sort(intervals.begin(), intervals.end(), comp);\
        vector<Interval> ret;\
        ret.push_back(intervals[0]);\
         \
        for(int i = 1; i < intervals.size(); i++)\
        \{\
            if (intervals[i].start <= ret[ret.size()-1].end)\
                ret[ret.size()-1].end = max(ret[ret.size()-1].end,intervals[i].end);\
            else\
                ret.push_back(intervals[i]);\
        \}\
        return ret;\
    \}\
    \
\};\
\
\
\
   }