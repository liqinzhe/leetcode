{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Design a data structure that supports the following two operations:\
\
void addWord(word)\
bool search(word)\
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.\
\
For example:\
\
addWord("bad")\
addWord("dad")\
addWord("mad")\
search("pad") -> false\
search("bad") -> true\
search(".ad") -> true\
search("b..") -> true\
\
dict tree
\f1 \'a3\'a1
\f0 \

\f1 \'bb\'b9\'ca\'c7\'d7\'d6\'b5\'e4\'ca\'f7\'a3\'a1\'a3\'a1\

\f0 \
*/\
\
class TNode\
\{\
public:    \
    char key;\
    bool isword;\
    TNode *child[26];\
\
    TNode()\
    \{\
        key = 0;\
        isword = false;\
        memset(child, 0, sizeof(TNode *) * 26);\
    \}\
    \
    TNode(char c)\
    \{\
        key = c;\
        isword = false;\
        memset(child, 0, sizeof(TNode *) * 26);\
    \}\
\
\};\
\
class WordDictionary \{\
private:\
    TNode *root;\
    \
public:\
    /** Initialize your data structure here. */\
    WordDictionary() \
    \{\
        root = new TNode();    \
    \}\
    \
    /** Adds a word into the data structure. */\
    void addWord(string word) \
    \{\
        TNode *p = root;\
        for(int i = 0; i < word.size(); i++)\
        \{\
            if( p->child[word[i]-'a'] == 0 )\
            \{\
                TNode *pNode = new TNode(word[i]); \
                p->child[word[i]-'a'] = pNode;\
            \}\
            p = p->child[word[i]-'a'];\
        \} \
        p->isword = true;\
    \}\
    \
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\
    \
    bool search(string word) \
    \{\
        return search(root, word, 0);\
    \}\
    \
    bool search(TNode * pNode, string word, int pos)\
    \{\
        TNode *p = pNode;\
        for(int i = pos;i < word.size(); i++)\
        \{\
            if (p && word[i] == '.')    \
            \{\
                for (int j = 0;j < 26; j++)\
                \{\
                    if (search(p->child[j], word, i + 1))\
                        return true;\
                \}\
                return false;\
            \}\
            else if(p && word[i]!='.')\
            \{\
                p = p->child[word[i]-'a'];    \
            \}\
            else\
                break;\
        \}\
        return (p && p->isword);\
    \}\
\};\
\
/**\
 * Your WordDictionary object will be instantiated and called as such:\
 * WordDictionary obj = new WordDictionary();\
 * obj.addWord(word);\
 * bool param_2 = obj.search(word);\
 */}