{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Two elements of a binary search tree (BST) are swapped by mistake.\
\
Recover the tree without changing its structure.\
\
Note:\
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?\

\f1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 TreeNode *first = NULL; 
\f1 //\'b4\'e6\'b5\'da\'d2\'bb\'b8\'f6\'b2\'bb\'ba\'cf\'c0\'ed\'b5\'c4\'b5\'e3
\f0 \
 TreeNode *second = NULL;
\f1 //\'b4\'e6\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'b2\'bb\'ba\'cf\'c0\'ed\'b5\'c4\'b5\'e3\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    TreeNode *first = NULL; 
\f1 //\'b4\'e6\'b5\'da\'d2\'bb\'b8\'f6\'b2\'bb\'ba\'cf\'c0\'ed\'b5\'c4\'b5\'e3
\f0 \
    TreeNode *second = NULL;
\f1 //\'b4\'e6\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'b2\'bb\'ba\'cf\'c0\'ed\'b5\'c4\'b5\'e3
\f0 \
    TreeNode *last = NULL;\
    \
    void guocheng(TreeNode *root)\
    \{\
        if (!root)  \
            return;\
        guocheng(root->left);\
       \
        if(last && (last->val > root->val) ) \
        \{\
            if (!first)\
                first = last;\
            second = root;\
        \}\
        last = root;\
       \
        guocheng(root->right);\
    \} \
    \
    void recoverTree(TreeNode* root) \
    \{\
        guocheng(root);   \
        if(first && second)\
            swap(first->val, second->val);\
        return;\
    \}\
\};}