{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a list, rotate the list to the right by k places, where k is non-negative.\
\
For example:\
Given 1->2->3->4->5->NULL and k = 2,\
return 4->5->1->2->3->NULL.\
\

\f1 \'b9\'d8\'bc\'fc\'d4\'da\'d3\'dak\'ca\'c7\'b7\'f1\'b3\'ac\'b3\'a4
\f0 \
\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
 \
class Solution \{\
public:\
    ListNode* rotateRight(ListNode* head, int k) \
    \{\
        if(!head)\
           return head;\
        \
        ListNode *k1=head;\
        ListNode *k2=head;\
        int i=k;\
        while(k1->next && i>0)\
        \{\
            k1=k1->next; \
            i--;    \
        \}\
        if(i!=0)//
\f1 \'c5\'d0\'b6\'cf
\f0 k
\f1 \'ca\'c7\'b2\'bb\'ca\'c7\'b3\'ac\'b3\'a4
\f0 \
        \{\
            int length=k-i+1; \
            k=k%length; \
            k1=head;\
            k2=head;\
            i=k;\
            while(k1->next && i>0)\
            \{\
                k1=k1->next; \
                i--;    \
            \}\
        \}\
        while(k1->next)\
        \{\
            k1=k1->next;\
            k2=k2->next;\
        \}\
        \
        k1->next=head;\
        head=k2->next;\
        k2->next=NULL;\
        \
        return head;   \
    \}\
\};}