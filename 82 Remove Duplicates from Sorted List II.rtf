{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\
\
For example,\
Given 1->2->3->3->4->4->5, return 1->2->5.\
Given 1->1->1->2->3, return 2->3.\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* deleteDuplicates(ListNode* head) \
    \{\
        if(!head)\
            return head;\
        \
        ListNode hhead(-1);\
        hhead.next=head;\
        ListNode *last=&hhead;\
        ListNode *p=head;\
        ListNode *q=p->next;\
        \
        while(q)\
        \{\
            while(p->val==q->val)\
            \{\
                q=q->next;\
                if(!q)\
                \{\
                    last->next=NULL;\
                    return hhead.next;\
                \}\
            \}\
            if(q==p->next)\
            \{\
                last=p;\
                p=q;\
                q=p->next;\
            \}\
            else\
            \{\
                last->next=q;\
                p=q;\
                q=p->next;\
            \}\
        \}\
        return hhead.next;  \
    \}\
\};}