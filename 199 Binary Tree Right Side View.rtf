{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
   Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\
\
For example:\
Given the following binary tree,\
   1            <---\
 /   \\\
2     3         <---\
 \\     \\\
  5     4       <---\
  You should return [1, 3, 4].\
\
way-1: 
\f1 \'b2\'e3\'ca\'fd\'b1\'e9\'c0\'fa,\'c3\'bf\'d2\'bb\'b2\'e3\'a3\'ac\'d7\'ee\'d3\'d2\'b1\'df\'b5\'c4\'b8\'b2\'b8\'c7\'b5\'f4\'d7\'f3\'b1\'df\'b5\'c4\'a1\'a3
\f0 \
 \
way-2: BFS,
\f1 \'c3\'bf\'b4\'ce\'d6\'b1\'bd\'d3
\f0 push
\f1 \'d7\'ee\'d3\'d2\'b1\'df\'b5\'c4\'a1\'a3
\f0 \
 \
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void guocheng(vector<int> & ret, TreeNode* root, int n)\
    \{\
        if (!root)\
            return;\
        else\
        \{\
            if(n == ret.size())\
                ret.push_back(root->val);\
            else\
                ret[n] = root->val;\
        \}\
        guocheng(ret, root->left, n + 1);\
        guocheng(ret, root->right, n + 1);\
    \}\
    \
    vector<int> rightSideView(TreeNode* root) \
    \{\
        //way-1\
        /*\
        vector<int> ret;\
        guocheng(ret,root,0);\
        return ret;\
        */\
        \
        //way-2\
        vector<int> ret;\
        deque<TreeNode*> que;\
        if (root)\
            que.push_back(root);\
        \
        while (!que.empty())\
        \{\
            ret.push_back(que.back()->val);\
            int size = que.size();\
            \
            for (int i = 0; i < size; i++)\
            \{\
                TreeNode *p = que.front();    \
                que.pop_front();\
                if (p->left)\
                    que.push_back(p->left);\
                if (p->right)\
                    que.push_back(p->right);\
            \}\
        \}\
        return ret;\
    \}\
\};}