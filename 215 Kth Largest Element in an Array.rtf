{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\froman\fcharset0 TimesNewRomanPSMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab420
\pard\pardeftab420\ri0\qj\partightenfactor0

\f0\fs24 \cf0 /*\
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\
\
For example,\
Given [3,2,1,5,6,4] and k = 2, return 5.\
\
Note: \
You may assume k is always valid, 1 \uc0\u8804  k \u8804  array's length.\
\
way-1:
\f1 \'c5\'c5\'d0\'f2
\f0 \'85\'85\
\
way-2:
\f1 \'b7\'d6\'d6\'ce\'cb\'e3\'b7\'a8\'b5\'c4\'cb\'bc\'cf\'eb
\f0 \
\

\f1 \'c0\'fb\'d3\'c3\'bf\'ec\'c5\'c5\'b5\'c4
\f0 partition
\f1 \'ba\'af\'ca\'fd\'cb\'bc\'cf\'eb\'a3\'ac\'d1\'a1\'b6\'a8\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'c4\'da\'b5\'c4\'d6\'b5\'d7\'f7\'ce\'aa
\f0 pivot
\f1 \'a3\'ac\'bd\'ab\'d0\'a1\'d3\'da
\f0 pivot
\f1 \'b5\'c4\'ca\'fd\'d7\'d6\'b7\'c5\'b5\'bd
\f0 pivot
\f1 \'d3\'d2\'b1\'df\'a3\'ac\'b4\'f3\'d3\'da\'b5\'c8\'d3\'da
\f0 pivot
\f1 \'b5\'c4\'ca\'fd\'d7\'d6\'b7\'c5\'b5\'bd
\f0 pivot
\f1 \'d7\'f3\'b1\'df\'a1\'a3\'bd\'d3\'d7\'c5\'c5\'d0\'b6\'cf\'c1\'bd\'b1\'df\'ca\'fd\'d7\'d6\'b5\'c4\'ca\'fd\'c1\'bf\'a3\'ac
\f0 \

\f1 \'c8\'e7\'b9\'fb\'d7\'f3\'b1\'df\'b5\'c4\'ca\'fd\'c1\'bf\'d0\'a1\'d3\'da
\f0 k
\f1 \'b8\'f6\'a3\'ac\'cb\'b5\'c3\'f7\'b5\'da
\f0 k
\f1 \'b4\'f3\'b5\'c4\'ca\'fd\'d7\'d6\'b4\'e6\'d4\'da\'d3\'da
\f0 pivot
\f1 \'bc\'b0
\f0 pivot
\f1 \'d3\'d2\'b1\'df\'b5\'c4\'c7\'f8\'d3\'f2\'d6\'ae\'c4\'da\'a3\'ac\'b6\'d4\'d3\'d2\'b0\'eb\'c7\'f8\'d6\'b4\'d0\'d0
\f0 partition
\f1 \'ba\'af\'ca\'fd\'a3\'bb
\f0 \

\f1 \'c8\'e7\'b9\'fb\'d3\'d2\'b1\'df\'b5\'c4\'ca\'fd\'c1\'bf\'d0\'a1\'d3\'da
\f0 k
\f1 \'b8\'f6\'a3\'ac\'cb\'b5\'c3\'f7\'b5\'da
\f0 k
\f1 \'b4\'f3\'b5\'c4\'ca\'fd\'d7\'d6\'d4\'da
\f0 pivot
\f1 \'ba\'cd
\f0 pivot
\f1 \'d7\'f3\'b1\'df\'b5\'c4\'c7\'f8\'d3\'f2\'d6\'ae\'c4\'da\'a3\'ac\'b6\'d4\'d7\'f3\'b0\'eb\'c7\'f8\'d6\'b4\'d0\'d0
\f0 partition
\f1 \'ba\'af\'ca\'fd\'a1\'a3
\f0 \

\f1 \'d6\'b1\'b5\'bd\'d7\'f3\'b0\'eb\'c7\'f8\'b8\'d5\'ba\'c3\'d3\'d0
\f0 k-1
\f1 \'b8\'f6\'ca\'fd\'a3\'ac\'c4\'c7\'c3\'b4\'b5\'da
\f0 k
\f1 \'b4\'f3\'b5\'c4\'ca\'fd\'be\'cd\'d2\'d1\'be\'ad\'d5\'d2\'b5\'bd\'c1\'cb
\f0 \
\
\
*/
\f2 \

\f0 class Solution \{\
public:\
    int findKthLargest(vector<int>& nums, int k) \
    \{\
        //way-1\
        /*\
        sort(nums.begin(),nums.end());\
        return nums[nums.size()-k];\
        */\
         \
        //way-2\
        int high = nums.size();\
        int low = 0;\
        while (low < high) \
        \{\
            int i = low;\
            int j = high-1;\
            int pivot = nums[low];\
            while (i <= j)\
            \{\
                while (i <= j && nums[i] >= pivot)\
                    i++;\
                while (i <= j && nums[j] < pivot)\
                    j--;\
                if (i < j)\
                    swap(nums[i++],nums[j--]);\
            \}\
            swap(nums[low],nums[j]);\
            \
            if (j == k-1)\
                return nums[j];\
            else if (j < k-1)\
                low = j+1;\
            else\
                high = j;\
        \}\
         \
    \}\
\};}