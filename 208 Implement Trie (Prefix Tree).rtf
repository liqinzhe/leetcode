{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Implement a trie with insert, search, and startsWith methods.\
\
Note:\
You may assume that all inputs are consist of lowercase letters a-z.\
\

\f1 \'b9\'b9\'d4\'ec\'d7\'d6\'b5\'e4\'ca\'f7
\f0 \
\

\f1 \'b9\'b9\'d4\'ec\'ca\'f7\'a3\'ac\'cf\'c8\'d2\'aa\'b9\'b9\'d4\'ec\'bd\'da\'b5\'e3\'a3\'a1
\f0 \
\
*/\
class TrieNode \{  \
public:  \
    char var;  \
    bool isWord;  \
    TrieNode* children[26];  \
    \
    TrieNode() \
    \{  \
        var = 0;  \
        isWord = false;  \
        memset(children, 0, sizeof(TreeNode*) * 26);  \
    \}  \
    \
    TrieNode(char c)\
    \{  \
        var = c;  \
        isWord = false;  \
        memset(children, 0, sizeof(TreeNode*)*26);  \
    \}  \
\};  \
\
\
\
class Trie \{\
public:\
    /** Initialize your data structure here. */\
    Trie() \
    \{\
        root = new TrieNode();    \
    \}\
    \
    /** Inserts a word into the trie. */\
    void insert(string word) \
    \{\
        TrieNode* pNode = root;  \
        if (word.length() <= 0)  \
        \{  \
            return;  \
        \}  \
        for (int i = 0; i < word.length(); i++)  \
        \{  \
            char c = word[i];  \
            if (pNode->children[c-'a'] == 0)  \
            \{  \
                TrieNode *pNew = new TrieNode(c);  \
                pNode->children[c-'a'] = pNew;  \
            \}  \
            pNode = pNode->children[c-'a'];  \
        \}  \
        pNode->isWord = true;      \
    \}\
    \
    /** Returns if the word is in the trie. */\
    bool search(string word) \
    \{\
        TrieNode *pNode = root;  \
        if (word.length() <= 0)  \
            return true;  \
        for (int i = 0; i < word.length(); i++)  \
        \{  \
            char c = word[i];  \
            pNode = pNode->children[c-'a'];  \
            if (pNode == NULL)  \
                return false;  \
        \}  \
        return pNode->isWord;     \
    \}\
    \
    /** Returns if there is any word in the trie that starts with the given prefix. */\
    bool startsWith(string prefix) \
    \{\
        TrieNode *pNode = root;  \
        if (prefix.length()<=0)  \
            return true;  \
        for (int i=0; i<prefix.length(); i++)  \
        \{  \
            char c = prefix[i];  \
            pNode = pNode->children[c-'a'];  \
            if (pNode == NULL)  \
                return false;  \
        \}  \
        return true;    \
    \}\
    \
private:\
    TrieNode *root;\
\};\
\
/**\
 * Your Trie object will be instantiated and called as such:\
 * Trie obj = new Trie();\
 * obj.insert(word);\
 * bool param_2 = obj.search(word);\
 * bool param_3 = obj.startsWith(prefix);\
 */}