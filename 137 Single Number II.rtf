{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\
\
Note:\
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\
\

\f1 \'b1\'be\'cc\'e2\'d5\'e6\'b5\'c4\'b7\'c7\'b3\'a3\'be\'ab\'c3\'ee\'a3\'a1\'bd\'ab\'c3\'bf\'d2\'bb\'b8\'f6\'ca\'fd\'bf\'b4\'b3\'c9
\f0 32
\f1 \'ce\'bb\'b6\'fe\'bd\'f8\'d6\'c6\'ca\'fd\'a3\'ac
\f0 32
\f1 \'ce\'bb\'c3\'bf\'d2\'bb\'ce\'bb\'cf\'e0\'bc\'d3\'d4\'d9
\f0 %3
\f1 \'a3\'ac\'ca\'a3\'cf\'c2\'b5\'c4\'be\'cd\'ca\'c7\'c4\'c7\'d2\'bb\'b8\'f6\'b5\'a5\'ca\'fd\'b5\'c4\'b6\'fe\'bd\'f8\'d6\'c6\'b1\'ed\'b4\'ef\'a1\'a3
\f0 \
\
*/\
class Solution \{\
public:\
    int singleNumber(vector<int>& nums) \
    \{\
        int count[32]=\{0\};\
        int ret=0;\
        \
        for(int i=0;i<32;i++)\
        \{\
            for(int j=0;j<nums.size();j++)\
            \{\
                count[i]+=(nums[j]>>i)&1;//
\f1 \'d2\'bb\'b6\'a8\'b2\'bb\'c4\'dc\'d3\'c3\'c7\'f3\'d3\'e0\'ca\'fd\'a3\'ac\'d2\'f2\'ce\'aa\'d3\'e0\'ca\'fd\'bf\'c9\'c4\'dc\'ce\'aa
\f0 -1
\f1 \'a3\'ac\'d2\'bb\'b6\'a8\'d2\'aa\'d3\'c3\'d5\'e2\'d6\'d6
\f0  
\f1 \'ce\'bb\'b2\'d9\'d7\'f7
\f0 \
            \}\
            count[i]=count[i]%3;\
            ret|=count[i]<<i;//
\f1 \'d2\'b2\'bf\'c9\'d2\'d4\'ce\'aa
\f0 ret+=count[i]<<i;  |(
\f1 \'bb\'f2
\f0 )
\f1 \'ce\'bb\'b2\'d9\'d7\'f7
\f0 \
        \}\
        \
        return ret; \
    \}\
\};}