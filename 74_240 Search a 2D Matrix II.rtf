{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh15940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\
\
Integers in each row are sorted in ascending from left to right.\
Integers in each column are sorted in ascending from top to bottom.\
For example,\
\
Consider the following matrix:\
\
[\
  [1,   4,  7, 11, 15],\
  [2,   5,  8, 12, 19],\
  [3,   6,  9, 16, 22],\
  [10, 13, 14, 17, 24],\
  [18, 21, 23, 26, 30]\
]\
Given target = 5, return true.\
\
Given target = 20, return false.\
\

\f1 \'d3\'d0\'d2\'bb\'b5\'e3\'b7\'d6\'d6\'ce\'cb\'e3\'b7\'a8\'b5\'c4\'b8\'d0\'be\'f5
\f0 \
\
*/\
class Solution \{\
public:\
    bool searchMatrix(vector<vector<int>>& matrix, int target) \
    \{\
        int row=matrix.size()-1;\
        int col=0;\
        while(row>=0 && col<matrix[0].size())\
        \{\
            if( matrix[row][col] == target ) \
                return 1;\
            else if(matrix[row][col] < target)\
                col++;\
            else\
                row--;\
        \}\
        return 0;\
    \}\
\};}