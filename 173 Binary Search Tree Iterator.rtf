{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.\
\
Calling next() will return the next smallest number in the BST.\
\
Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.\
\

\f1 \'d2\'aa\'c7\'f3\'ca\'c7\'d0\'e8\'d2\'aa
\f0 O(1)
\f1 \'b5\'c4\'ca\'b1\'bc\'e4\'a3\'ac\'d6\'bb\'c4\'dc\'cc\'e1\'c7\'b0\'b0\'d1\'b6\'fe\'b2\'e6\'cb\'d1\'cb\'f7\'ca\'f7\'b1\'e9\'c0\'fa\'b3\'f6\'c0\'b4\'a3\'ac\'b1\'e9\'c0\'fa\'d5\'e2\'b8\'f6\'d3\'c3
\f0 stack
\f1 \'a3\'ac\'b6\'fe\'b2\'e6\'ca\'f7\'d6\'d0\'d0\'f2\'b1\'e9\'c0\'fa\'b1\'d8\'b1\'b3\'a3\'a1
\f0 \
\
*/\
/**\
 * Definition for binary tree\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
\
class BSTIterator \{\
public:\
    BSTIterator(TreeNode *root) \
    \{\
        this->pos = 0; \
        \
        stack<TreeNode *> s;\
        TreeNode * p = root;\
        while (p || !s.empty())\
        \{\
            while (p)\
            \{\
                s.push(p);\
                p = p->left;\
            \}\
            if (!s.empty())\
            \{\
                p = s.top();\
                value.push_back(p->val);\
                s.pop();\
                p = p->right;\
            \}\
        \}\
    \}\
    \
    bool hasNext() \
    \{\
        return pos < value.size();\
    \}\
\
    int next() \
    \{\
        return value[pos++];\
    \}\
    \
private:\
    \
    int pos;\
    vector<int> value;\
\};\
\
\
/**\
 * Your BSTIterator will be called like this:\
 * BSTIterator i = BSTIterator(root);\
 * while (i.hasNext()) cout << i.next();\
 */}