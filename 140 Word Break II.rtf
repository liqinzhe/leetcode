{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.\
\
Return all such possible sentences.\
\
For example, given\
s = "catsanddog",\
dict = ["cat", "cats", "and", "sand", "dog"].\
\
A solution is ["cats and dog", "cat sand dog"].\
\
\

\f1 \'d7\'ee\'bf\'aa\'ca\'bc\'d6\'b1\'bd\'d3\'d3\'c3
\f0 vector
\f1 \'c0\'b4\'bd\'f8\'d0\'d0\'b2\'e9\'d5\'d2\'a3\'ac
\f0 1035ms
\f1 \'a3\'ac\'c8\'bb\'ba\'f3\'b8\'c4\'b3\'c9
\f0 map
\f1 \'b2\'e9\'d5\'d2\'a3\'ac
\f0 9ms
\f1 \'a1\'a3
\f0 \

\f1 \'cb\'b5\'c3\'f7\'ca\'b1\'bc\'e4\'b6\'bc\'bb\'a8\'d4\'da\'b2\'e9\'d5\'d2\'c9\'cf\'c3\'e6\'c1\'cb\'a3\'a1\'d5\'e2\'d6\'d6\'c3\'bf\'b4\'ce\'b6\'bc\'d2\'aa\'b2\'e9\'d5\'d2\'b5\'c4\'cc\'e2\'d2\'bb\'b6\'a8\'d2\'aa\'d3\'c3
\f0 map
\f1 \'a3\'a1\'a3\'a1\
\

\f0 \

\f1 \'d2\'bb\'b8\'f6\'b1\'c8\'bd\'cf\'b1\'ea\'d7\'bc\'b5\'c4
\f0 backtracking!\
\
A[i]
\f1 \'b4\'fa\'b1\'ed\'c4\'dc\'b2\'bb\'c4\'dc\'b9\'b9\'b3\'c9
\f0 0-i
\f1 \'a3\'a1
\f0 \
B[i][j]
\f1 \'b4\'fa\'b1\'ed\'d3\'d0
\f0 i
\f1 \'b5\'bd
\f0 j
\f1 \'d5\'e2\'b8\'f6\'b5\'a5\'b4\'ca\'a3\'a1
\f0 \
*/\
class Solution \{\
public:\
    void tianchong(string s,string temp,vector<string> &ret,int pos,int n,vector<vector<int>> &B)\
    \{   \
        if(pos>n)\
        \{\
            ret.push_back(temp);\
            return;\
        \}\
        for(int i=pos;i<=n;i++)\
        \{\
            if(B[pos][i]==1)\
            \{    \
                if(temp=="")    \
                    tianchong(s,s.substr(pos-1,i-pos+1),ret,i+1,n,B);\
                else\
                    tianchong(s,temp+" "+s.substr(pos-1,i-pos+1),ret,i+1,n,B);\
            \}\
        \}\
    \}\
    \
    vector<string> wordBreak(string s, vector<string>& word) \
    \{\
        \
        int n=s.size();\
        int A[n+1]=\{0\};\
        A[0]=1;\
        \
        //map
\f1 \'b2\'e9\'d5\'d2\'bf\'ec
\f0 \
        map<string,int> words;\
        for(int i=0;i<word.size();i++)\
            words[word[i]]++;\
       \
        vector<int> C(n+1,0);\
        vector<vector<int>> B(n+1, C);\
        for(int i=0;i<n;i++)\
        \{\
            if(A[i]==1) \
            \{\
                for(int j=i;j<n;j++)\
                \{\
                    if(words.find(s.substr(i,j-i+1))!=words.end())\
                    \{  \
                        A[j+1]=1;\
                        B[i+1][j+1]=1;\
                    \}\
                \}\
            \}\
        \}\
\
        vector<string> ret;\
        if(A[n]==1)\
            tianchong(s,"",ret,1,n,B);\
       \
        return ret;     \
    \}\
\};}