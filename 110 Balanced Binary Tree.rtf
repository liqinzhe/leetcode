{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, determine if it is height-balanced.\
\
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\
\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    \
    map<TreeNode*, int> depth;\
    \
    int getdeep(TreeNode* root)\
    \{\
        if (!root)\
            return 0;\
\
        int now_deep = max(getdeep(root->left), getdeep(root->right)) + 1;\
        depth[root] = now_deep;\
        return now_deep;\
    \}\
    \
    bool isBalanced(TreeNode* root) \
    \{\
        depth[NULL] = 0;\
        getdeep(root);\
        return helper(root);\
    \}\
    \
    bool helper(TreeNode* root)\
    \{\
        if (!root || (!root->left && !root->right))\
            return 1;\
        \
        if ( abs(depth[root->left] - depth[root->right]) > 1 )\
            return 0;\
        return helper(root->left) && helper(root->right);\
    \}\
    \
\};}