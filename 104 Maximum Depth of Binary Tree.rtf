{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, find its maximum depth.\
\
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    int depth;\
    void guocheng(TreeNode* root,int deep)\
    \{\
        if (!root)\
            return;\
        else\
        \{\
            depth = max(depth, ++deep);\
            guocheng(root->left, deep);\
            guocheng(root->right, deep);\
        \}\
    \}\
    \
    int maxDepth(TreeNode* root) \
    \{\
       depth = 0;\
       guocheng(root, 0);     \
       return depth;     \
    \}\
\};}