{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16620\viewh12860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Implement wildcard pattern matching with support for '?' and '*'.\
\
'?' Matches any single character.\
'*' Matches any sequence of characters (including the empty sequence).\
\
The matching should cover the entire input string (not partial).\
\
The function prototype should be:\
bool isMatch(const char *s, const char *p)\
\
Some examples:\
isMatch("aa","a") 
\f1 \uc0\u8594 
\f0  false\
isMatch("aa","aa") 
\f1 \uc0\u8594 
\f0  true\
isMatch("aaa","aa") 
\f1 \uc0\u8594 
\f0  false\
isMatch("aa", "*") 
\f1 \uc0\u8594 
\f0  true\
isMatch("aa", "a*") 
\f1 \uc0\u8594 
\f0  true\
isMatch("ab", "?*") 
\f1 \uc0\u8594 
\f0  true\
isMatch("aab", "c*a*b") 
\f1 \uc0\u8594 
\f0  false\
\
way-1:
\f2 \'b7\'c7\'b3\'a3\'c5\'a3\'b1\'c6\'b5\'c4\'cb\'e3\'b7\'a8\'a3\'ac
\f0 starpos
\f2 \'bc\'c7\'c2\'bc\'c9\'cf\'d2\'bb\'b8\'f6
\f0 *
\f2 \'b5\'c4\'ce\'bb\'d6\'c3
\f0 \
\
way-2:TLE\
\
*/\
class Solution \{\
public:\
    /*\
    bool ismatching(string s,string p)\
    \{\
        if( (s.size() == 0) && (p.size() == 0) )\
            return 1;\
        else if( (s.size() == 0) && (p.size() > 0))\
        \{\
            if(p[0] == '*')\
                return ismatching(s, p.substr(1,p.size()-1));\
            else\
                return 0;\
        \}\
        else if((s.size() > 0) && (p.size() == 0))\
            return 0;\
        else\
        \{\
            if((s[0] == p[0]) || (p[0] == '?'))\
                return ismatching( s.substr(1,s.size()-1), p.substr(1,p.size()-1));\
            else if(p[0]=='*')\
            \{\
                for(int i=0;i<=s.size();i++)\
                \{\
                    if( ismatching(s.substr(i,s.size()-i), p.substr(1,p.size()-1)) )\
                        return 1;\
                \}\
                return 0;\
            \}\
            else\
                return 0;\
        \}\
    \}\
    */\
    bool isMatch(string s, string p)\
    \{\
        int k=0;\
        while(k<p.size())//
\f2 \'c8\'a5\'b5\'f4\'b6\'e0\'d3\'e0\'b5\'c4
\f0 *\
        \{\
            if(p[k]=='*')\
            \{\
                if(p[k+1]=='*' && k+1<p.size())\
                \{ \
                    p.erase(k+1,1);\
                    k--; \
                \} \
            \}\
            k++;\
        \}\
        \
        //way-1\
        \
        int starpos=-1;\
        int spos;\
        int ss=0;\
        int pp=0;\
        \
        while(true)\
        \{\
            if(ss==s.size() && pp==p.size()) \
                return true;\
            else if(ss==s.size() && pp!=p.size())   \
            \{\
                while(pp!=p.size())\
                \{\
                    if(p[pp]=='*')\
                        pp++;\
                    else  \
                        return false;\
                \}\
                return true;\
            \}\
            else if(ss!=s.size() && pp==p.size())\
            \{\
                if(starpos!=-1)\
                \{\
                    pp=starpos+1;\
                    ss=spos+1;\
                    spos++;\
                \}\
                else\
                    return false;\
            \}\
            else\
            \{\
                if(s[ss]==p[pp] || p[pp]=='?')   \
                \{\
                    ss++;\
                    pp++;\
                \}\
                else if(p[pp]=='*')\
                \{\
                    starpos=pp;\
                    spos=ss;\
                    pp++;\
                \}\
                else if(starpos!=-1)//
\f2 \'d2\'bb\'b5\'a9\'c3\'bb\'c6\'a5\'c5\'e4\'c9\'cf\'a3\'ac\'be\'cdpp\'be\'cd\'bb\'d8\'b5\'bd\'c9\'cf\'d2\'bb\'b8\'f6
\f0 starpos
\f2 \'a3\'acspos\'ba\'f3\'d2\'c6\'a3\'ac\'b4\'fa\'b1\'ed*\'b6\'e0\'cc\'e6\'b4\'fa\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb
\f0 \
                \{\
                    pp=starpos+1;\
                    ss=spos+1;\
                    spos++;\
                \}\
                else\
                    return false;\
            \}\
        \}\
        \
        /*\
        //way-2\
        return ismatching(s,p);\
        */\
    \}\
\};}