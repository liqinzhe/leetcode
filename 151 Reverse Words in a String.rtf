{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an input string, reverse the string word by word.\
\
For example,\
Given s = "the sky is blue",\
return "blue is sky the".\
\
Update (2015-02-12):\
For C programmers: Try to solve it in-place in O(1) space.\
\
\
*/\
class Solution \{\
public:\
    void chuli(string &s)\
    \{\
        if(s.size()==0)\
            return;\
            \
        while(1)\
        \{ \
            if(s.size()==0)\
                return;\
            else if(s[0]==' ')  \
                s=s.substr(1,s.size()-1);\
            else if(s[s.size()-1]==' ')  \
                s=s.substr(0,s.size()-1);\
            else\
                break;\
        \}\
        int k=0;\
        while(k<s.size())\
        \{\
            if(s[k]==' ')\
            \{\
                for(int p=k+1;p<s.size();p++)\
                \{\
                    if(s[p]!=' ')\
                    \{\
                        s.erase(k+1,p-k-1);\
                        break;\
                    \}\
                \}\
            \}    \
            k++;\
        \}\
    \}\
    \
    void reverseWords(string &s)\
    \{\
        \
        //way-1\
        /*\
        //
\f1 \'cf\'c8\'c7\'e5\'c0\'ed
\f0 s
\f1 \'a3\'ac\'b0\'d1\'b2\'bb\'ba\'cf\'b8\'f1\'b5\'c4\'bf\'d5\'b8\'f1\'b4\'a6\'c0\'ed\'b5\'f4
\f0 \
        chuli(s);\
        //cout<<"-"+s+"-"<<endl;\
        \
        if(s.size()==0)\
            return;\
        \
        int leftl=0;\
        int leftr;\
        int rightr=s.size()-1;\
        int rightl;\
        \
        while(1)\
        \{\
            leftr=leftl;\
            while(leftr<s.size())\
            \{    \
                if(s[leftr]!=' ')    \
                    leftr++;\
                else\
                    break;\
            \}\
            \
            rightl=rightr;\
            while(rightl>=0)\
            \{    \
               if(s[rightl]!=' ')    \
                    rightl--;\
               else\
                    break;\
            \}\
        \
            //s
\f1 \'b7\'d6\'ce\'aa
\f0 5
\f1 \'bd\'d8
\f0 ,
\f1 \'b5\'da\'b6\'fe\'a1\'a2\'cb\'c4\'bd\'da\'bd\'bb\'bb\'bb
\f0   [0,leftl-1][leftl,leftr-1][leftr,rightl][rightl+1,rightr][rightr+1,s.size()-1]\
            //the sky is blue\
            //blue sky is the\
            //0123456789\
            \
            if(leftr>rightl)\
                return;\
            \
            s=s.substr(0,leftl)+s.substr(rightl+1,rightr-rightl)+s.substr(leftr,rightl-leftr+1)+\
            s.substr(leftl,leftr-leftl)+s.substr(rightr+1,s.size()-rightr) ;\
            \
            int temp=(leftr-leftl);\
            leftl=leftl+rightr-rightl+1;\
            rightr=rightr-temp-1;\
        \}\
        return;\
        */\
        \
        //way-2\
        stack<string> cun;\
        int k=0;\
        int length;\
        while(k<s.size())\
        \{\
            length=1;\
            if(s[k]!=' ')\
            \{\
                while(1)\
                \{\
                    if(k+length<s.size() && s[k+length]!=' ')\
                        length++;                \
                    else\
                    \{\
                        cun.push(s.substr(k,length));\
                        break;\
                    \}\
                \}\
                k=k+length;\
            \}\
            k++;\
        \}\
        \
        s="";\
        while(!cun.empty())\
        \{\
            s+=cun.top()+" ";\
            cun.pop();\
        \}\
        s=s.substr(0,s.size()-1);\
        return;\
    \}\
\};}