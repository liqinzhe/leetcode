{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17120\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an absolute path for a file (Unix-style), simplify it.\
\
For example,\
path = "/home/", => "/home"\
path = "/a/./b/../../c/", => "/c"\
\
\
*/\
class Solution \{\
public:\
    string simplifyPath(string path) \
    \{\
        vector<char> result;\
        \
        int k;\
        for(int i=0;i<path.size();i++)\
        \{\
            if(path[i]=='/')\
            \{\
                if(i>0 && path[i-1]=='/')\
                    continue;\
                else\
                    result.push_back('/');\
            \}  \
            else if(path[i]=='.')\
            \{\
                if((path[i-1]=='/' && i+1<path.size() && path[i+1]=='/') || (path[i-1]=='/' && i+1==path.size()))  //   /./\
                \{\
                    i++;\
                    continue;\
                \}\
                else if((path[i-1]=='/' && i+2<path.size() && path[i+1]=='.' && path[i+2]=='/') || (path[i-1]=='/' && path[i+1]=='.' && i+2==path.size()))\
                \{\
                    \
                    if(result.size()>1)\
                        result.pop_back();\
                    while(result.size()!=0)\
                    \{\
                        k=result.size()-1;\
                        if(result[k]!='/')\
                            result.pop_back();  \
                        else\
                            break;\
                    \}\
                    i=i+2;\
                    continue;\
                \}\
                else\
                  result.push_back('.');\
            \}\
            else\
            \{\
                result.push_back(path[i]);\
            \}\
        \}\
        \
        k=result.size()-1;\
        if(result[k]=='/' && k!=0)\
            result.pop_back();\
        \
        string re="";\
        for(int i=0;i<result.size();i++)\
        \{\
            re=re+result[i];\
        \}\
        \
        if(re=="")\
            re="/";\
            \
        return re;\
    \}\
\};}