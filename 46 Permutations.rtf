{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a collection of distinct numbers, return all possible permutations.\
\
For example,\
[1,2,3] have the following permutations:\
[\
  [1,2,3],\
  [1,3,2],\
  [2,1,3],\
  [2,3,1],\
  [3,1,2],\
  [3,2,1]\
]\
\
backtracking!\
\
*/\
class Solution \{\
public:\
    void charu(vector<vector<int>> &result, vector<int> mm, vector<int> nums)\
    \{\
        if(nums.size() == 0)\
        \{\
            result.push_back(mm);\
            return;\
        \}\
        \
        vector<int> temp;\
        for(int i=0; i<nums.size(); i++)\
        \{\
            temp=nums;\
            \
            mm.push_back(nums[i]);\
            temp.erase(temp.begin()+i);\
            charu(result, mm, temp);\
            \
            mm.pop_back();\
        \}\
    \}\
\
    vector<vector<int>> permute(vector<int>& nums) \
    \{\
        vector<vector<int>> result;\
        vector<int> mm;\
        if(nums.size()!=0)\
            charu(result, mm, nums);\
                    \
        return result;   \
    \}\
\};\
}