{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, find the maximum path sum.\
\
For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\
\
For example:\
Given the below binary tree,\
\
       1\
      / \\\
     2   3\
Return 6.\
\

\f1 \'d3\'d0\'d2\'bb\'b8\'f6\'b9\'d8\'bc\'fc\'b5\'e3\'d4\'da\'d3\'da\'a3\'acget
\f0 max
\f1 \'d6\'bb\'b7\'b5\'bb\'d8\'b2\'bb\'bb\'e1\'cd\'e4\'c7\'fa\'b5\'c4\'c2\'b7\'be\'b6\'d7\'ee\'b3\'a4\'a3\'ac\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bfmaxpath\'b2\'c5\'ca\'c7\'b5\'c3\'b5\'bd\'cd\'e4\'c7\'fa\'c7\'e9\'bf\'f6\'b5\'c4\'c8\'ab\'be\'d6\'d7\'ee\'b3\'a4\'a1\'a3\

\f0 \
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    int maxpath;\
\
    int getmax(TreeNode* root)\
    \{\
        if (!root)\
            return 0;\
       \
        int l = getmax(root->left);\
        int r = getmax(root->right);\
        \
        if (l <= 0 && r <= 0)\
        \{\
            maxpath = max(maxpath, root->val);\
            return root->val;  \
        \}  \
        else if(l <= 0)\
        \{\
            maxpath = max(maxpath, root->val + r);\
            return root->val + r;    \
        \}\
        else if(r <= 0)\
        \{\
            maxpath = max(maxpath, root->val + l);\
            return root->val + l;    \
        \}\
        else\
        \{\
            maxpath = max(maxpath, root->val + r + l);\
            return root->val + max(l, r); \
        \}\
        return 0;\
    \}\
    \
    int maxPathSum(TreeNode* root) \
    \{\
        maxpath = INT_MIN;\
        getmax(root);\
        return maxpath;\
    \}\
\};}