{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.\
\
Note: \
You may assume k is always valid, 1 ? k ? BST's total elements.\
\
Follow up:\
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\
\
way-1:get_sortlist\
\
way-2:calculate left and right \
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void get_sortlist(vector<int> &sortlist, TreeNode *root)\
    \{\
        if(!root)\
            return;\
        \
        get_sortlist(sortlist, root->left);\
        sortlist.push_back(root->val);\
        get_sortlist(sortlist, root->right);\
        return;\
    \}\
    \
    int cal_node(TreeNode *root)\
    \{\
        if(!root)\
            return 0;\
        \
        return 1 + cal_node(root->left) + cal_node(root->right);\
    \}\
    \
    int kthSmallest(TreeNode* root, int k) \
    \{\
        //way-1\
        /*\
        vector<int> sortlist;\
        get_sortlist(sortlist,root);\
        return sortlist[k-1];\
        */\
        \
        //way-2\
        int LeftSize = cal_node(root->left);\
        if(k == LeftSize+1)\
            return root->val;\
        else if(k <= LeftSize)\
            return kthSmallest(root->left, k);\
        else\
            return kthSmallest(root->right, k - 1 - LeftSize);\
        \
    \}\
\};}