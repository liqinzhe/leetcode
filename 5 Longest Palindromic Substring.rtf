{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\
\
Example:\
\
Input: "babad"\
\
Output: "bab"\
\
Note: "aba" is also a valid answer.\
Example:\
\
Input: "cbbd"\
\
Output: "bb"\
\

\f1 \'cf\'c8\'b0\'d1\'d6\'d0\'bc\'e4\'b5\'e3\'b6\'a8\'ce\'bb\'a3\'ac\'d4\'d9\'cd\'f9\'c1\'bd\'b1\'df\'d5\'d2
\f0 \
\
*/\
class Solution \{\
public:\
	string longestPalindrome(string s)\
	\{\
		if (s == "")\
			return "";\
		string result=s.substr(0,1);\
		int k = 1;\
		int max = 0;\
		for (int i = 0; i < s.length(); i++)\
		\{\
			while (i - k >= 0 && i + k < s.length() && s[i - k] == s[i + k])\
			\{\
				k++;\
			\}\
			if (((k << 1) - 1) > result.size())\
				result = s.substr(i - k+1, (k << 1) - 1);\
			k = 1;\
			if (s[i] == s[i + 1] && i + 1 < s.length())\
			\{\
				while (i - k >= 0 && i + k + 1 < s.length() && s[i - k] == s[i + k + 1])\
				\{\
					k++;\
				\}\
				if ((k << 1 ) > result.size())\
					result = s.substr(i - k+1, k << 1 );\
			\}\
			k = 1;\
		\}\
		return result;\
\
	\}\
\};}