{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
There are a total of n courses you have to take, labeled from 0 to n - 1.\
\
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\
\
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\
\
For example:\
\
2, [[1,0]]\
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.\
\
2, [[1,0],[0,1]]\
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\
\
   
\f1 \'d5\'e2\'b8\'f6\'cc\'e2\'b5\'c4\'b9\'d8\'bc\'fc\'d4\'da\'d3\'da
\f0  
\f1 \'be\'cd\'ca\'c7\'cd\'bc\'b5\'c4\'cb\'bc\'cf\'eb\'a3\'ac\'d3\'d0\'c3\'bb\'d3\'d0\'bb\'b7\'b5\'c4\'b4\'e6\'d4\'da
\f0 \
   
\f1 \'b7\'bd\'b7\'a8\'ca\'c7\'ca\'b9\'d3\'c3\'cd\'d8\'c6\'cb\'c5\'c5\'d0\'f2\'cb\'bc\'cf\'eb\'a3\'ac\'d5\'d2\'c8\'eb\'b6\'c8\'ce\'aa
\f0 0
\f1 \'b5\'c4\'b5\'e3\'a3\'ac\'c8\'bb\'ba\'f3\'c9\'be\'b3\'fd\'d5\'e2\'b8\'f6\'b5\'e3\'d2\'d4\'bc\'b0\'b3\'f6\'b1\'df\'a3\'ac\'d6\'d8\'b8\'b4\'d5\'e2\'b8\'f6\'b9\'fd\'b3\'cc\'a3\'ac\'c8\'e7\'b9\'fb\'d5\'d2\'b2\'bb\'b5\'bd\'c8\'eb\'b6\'c8\'ce\'aa
\f0 0
\f1 \'b5\'c3\'b5\'e3\'be\'cd\'cb\'b5\'c3\'f7\'d3\'d0\'bb\'b7\'a3\'a1
\f0 \
   \
   
\f1 \'ca\'b9\'d3\'c3
\f0 indegree
\f1 \'ca\'fd\'d7\'e9\'c0\'b4\'b4\'e6\'c8\'eb\'b6\'c8\'a1\'a3
\f0 \
\
*/\
class Solution \{\
public:\
    int findpoint(vector<int> &indegree, int num)//
\f1 \'d5\'d2\'c8\'eb\'b6\'c8\'ce\'aa
\f0 0
\f1 \'b5\'c4\'b5\'e3
\f0 \
    \{\
        int flag = 0;\
        for (int i = 0; i < num; i++)\
        \{\
            if(indegree[i] == 0)\
            \{  \
                indegree[i]--;\
                return i;\
            \}\
        \}\
        return -1;\
    \}\
    \
    bool canFinish(int num, vector<pair<int, int>>& prer) \
    \{\
        //sort\
        sort(prer.begin(), prer.end());\
        auto it = unique(prer.begin(), prer.end());\
        prer.resize(it - prer.begin());\
        \
        //
\f1 \'d0\'ce\'b3\'c9\'c1\'da\'bd\'d3\'be\'d8\'d5\'f3
\f0 \
        vector<int> indegree(num, 0);\
        vector<vector<int>> p(num, indegree);\
       \
        for (auto it : prer)\
        \{\
            p[it.first][it.second] = 1;\
            indegree[it.second]++;\
        \}\
       \
        //
\f1 \'be\'cd\'ca\'c7\'bf\'b4\'d2\'bb\'b8\'f6\'d3\'d0\'cf\'f2\'cd\'bc\'ca\'c7\'b7\'f1\'d0\'ce\'b3\'c9\'bb\'b7\'a3\'ac
\f0 return 0
\f1 \'a1\'a3
\f0 \
        int taken = 0;\
        while (taken != num)\
        \{\
            int k = findpoint(indegree, num);\
            if(k == -1)    //
\f1 \'c3\'bb\'d3\'d0\'c8\'eb\'b6\'c8\'ce\'aa
\f0 0
\f1 \'b5\'c4\'b5\'e3
\f0 \
                return false;\
            for (int i = 0; i < num; i++)        \
            \{  \
                if( p[k][i] == 1)\
                    indegree[i]--;\
            \}\
            taken++;    \
        \}\
        return true;   \
    \}\
\};}