{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Follow up for problem "Populating Next Right Pointers in Each Node".\
\
What if the given tree could be any binary tree? Would your previous solution still work?\
\
Note:\
\
You may only use constant extra space.\
For example,\
Given the following binary tree,\
         1\
       /  \\\
      2    3\
     / \\    \\\
    4   5    7\
After calling your function, the tree should look like:\
         1 -> NULL\
       /  \\\
      2 -> 3 -> NULL\
     / \\    \\\
    4-> 5 -> 7 -> NULL\
    \
   
\f1 \'d3\'c3\'d2\'bb\'b8\'f6\'b6\'fe\'ce\'ac\'ca\'fd\'d7\'e9\'c0\'b4\'b4\'e6\'b5\'e3\'a3\'ac\'b9\'d8\'bc\'fc\'d4\'da\'d3\'da\'cf\'c8\'b4\'e6root->right!
\f0 \
*/\
/**\
 * Definition for binary tree with next pointer.\
 * struct TreeLinkNode \{\
 *  int val;\
 *  TreeLinkNode *left, *right, *next;\
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void guocheng(vector<vector<TreeLinkNode*>> &nums, TreeLinkNode *root, int floor)\
    \{\
        if (!root)\
            return;\
          \
        if (nums.size() < floor)\
        \{\
            vector<TreeLinkNode*> m1; \
            m1.push_back(root);  \
            nums.push_back(m1);\
            root->next = NULL;\
        \}\
        else\
        \{\
            int k = nums[floor-1].size() - 1;\
            root->next = nums[floor-1][k];\
            nums[floor-1].push_back(root);\
        \}\
         \
        guocheng(nums, root->right, floor + 1); \
        guocheng(nums, root->left, floor + 1); \
    \}\
    \
    void connect(TreeLinkNode *root) \
    \{\
        vector<vector<TreeLinkNode*>> nums;\
        guocheng(nums, root, 1);\
    \}\
\};}