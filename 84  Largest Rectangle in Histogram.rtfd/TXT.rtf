{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Â±èÂπïÂø´ÁÖß 2017-03-15 ‰∏äÂçà9.54.54.png \width4260 \height4440
}¨}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Â±èÂπïÂø´ÁÖß 2017-03-15 ‰∏äÂçà9.55.04.png \width4060 \height4420
}¨}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 The largest rectangle is shown in the shaded area, which has area = 10 unit.\
\
For example,\
Given heights = [2,1,5,6,2,3],\
return 10.\
\

\f1 \'cb\'bc\'c2\'b7\'a3\'ba\'c8\'e7\'b9\'fb\'b5\'b1\'c7\'b0\'d4\'aa\'cb\'d8\'b1\'c8\'d5\'bb\'b6\'a5\'d4\'aa\'cb\'d8\'b4\'f3\'a3\'ac\'bd\'f8\'d5\'bb
\f0 \
      
\f1 \'b7\'f1\'d4\'f2\'a3\'ac\'bc\'c6\'cb\'e3\'d5\'be\'c0\'ef\'d4\'aa\'cb\'d8\'d7\'e9\'b3\'c9\'b5\'c4\'d7\'ee\'b4\'f3\'c3\'e6\'bb\'fd\'a3\'ac\'d4\'d9\'bd\'ab\'d5\'be\'c0\'ef\'d4\'aa\'cb\'d8\'c8\'ab\'b2\'bf\'bb\'bb\'ce\'aa\'b5\'b1\'c7\'b0\'d4\'aa\'cb\'d8\'a3\'a8\'d0\'a1\'d2\'bb\'b5\'e3\'a3\'a9
\f0 \
      \
      
\f1 \'d7\'ee\'ba\'f3\'d5\'be\'c0\'ef\'b6\'bc\'ca\'c7\'b5\'dd\'d4\'f6\'b5\'c4\'a3\'ac\'c8\'bb\'ba\'f3\'b0\'b4\'d5\'d5\'c3\'e6\'bb\'fd\'b0\'a4\'b8\'f6\'cb\'e3
\f0 \
*/\
class Solution \{\
public:\
    int largestRectangleArea(vector<int>& height) \
    \{\
         int result=0;\
         stack<int> stk;\
        \
         for(int i=0;i<height.size();i++) \
         \{\
             if(stk.empty() || stk.top()<=height[i])\
               stk.push(height[i]);\
             else\
             \{\
                 int count=0;\
                 while(!stk.empty() && stk.top()>height[i])\
                 \{\
                     count++;\
                     result=max(result,stk.top()*count);\
                     stk.pop();\
                 \}\
                 while(count--)\
                   stk.push(height[i]);\
                 stk.push(height[i]);\
             \}\
         \}\
         int count=1;        \
         while(!stk.empty())\
         \{\
             result=max(result,stk.top()*count);\
             count++;\
             stk.pop();\
         \}\
         return result;\
    \}\
\};}