{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
\
Sort a linked list in O(n log n) time using constant space complexity.\
\

\f1 \'d2\'aa\'c7\'f3\'ca\'c7
\f0 O(nlogn) 
\f1 \'c7\'d2\'b2\'bb\'c9\'ea\'c7\'eb\'b6\'ee\'cd\'e2\'bf\'d5\'bc\'e4
\f0 \
\
**********
\f1 \'cb\'f9\'d2\'d4\'d1\'a1\'d4\'f1\'bf\'ec\'c5\'c5\'a3\'ac\'cd\'f8\'c9\'cf\'cb\'b5\'bf\'ec\'c5\'c5\'bb\'e1\'b3\'ac\'ca\'b1\'a3\'a1
\f0 \

\f1 \'c1\'b4\'b1\'ed\'bf\'ec\'c5\'c5\'d3\'d0\'b8\'f6\'ce\'ca\'cc\'e2\'ca\'c7
\f0 high--
\f1 \'c4\'c7\'d2\'bb\'ce\'bb\'b2\'e9\'d5\'d2
\f0 o(n),
\f1 \'b6\'f8\'ca\'fd\'d7\'e9\'ca\'c7
\f0 o(1)\
\
\
**********
\f1 \'cb\'f9\'d2\'d4\'d3\'c3\'b9\'e9\'b2\'a2\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1
\f0 \

\f1 \'d6\'f7\'d2\'aa\'bf\'bc\'b2\'ec
\f0 3
\f1 \'b8\'f6\'d6\'aa\'ca\'b6\'b5\'e3\'a3\'ac
\f0 \

\f1 \'d6\'aa\'ca\'b6\'b5\'e3
\f0 1
\f1 \'a3\'ba\'b9\'e9\'b2\'a2\'c5\'c5\'d0\'f2\'b5\'c4\'d5\'fb\'cc\'e5\'cb\'bc\'cf\'eb
\f0 \

\f1 \'d6\'aa\'ca\'b6\'b5\'e3
\f0 2
\f1 \'a3\'ba\'d5\'d2\'b5\'bd\'d2\'bb\'b8\'f6\'c1\'b4\'b1\'ed\'b5\'c4\'d6\'d0\'bc\'e4\'bd\'da\'b5\'e3\'b5\'c4\'b7\'bd\'b7\'a8
\f0 \

\f1 \'d6\'aa\'ca\'b6\'b5\'e3
\f0 3
\f1 \'a3\'ba\'ba\'cf\'b2\'a2\'c1\'bd\'b8\'f6\'d2\'d1\'c5\'c5\'ba\'c3\'d0\'f2\'b5\'c4\'c1\'b4\'b1\'ed\'ce\'aa\'d2\'bb\'b8\'f6\'d0\'c2\'b5\'c4\'d3\'d0\'d0\'f2\'c1\'b4\'b1\'ed
\f0 \
\

\f1 \'b9\'e9\'b2\'a2\'c5\'c5\'d0\'f2\'b5\'c4\'bb\'f9\'b1\'be\'cb\'bc\'cf\'eb\'ca\'c7\'a3\'ba
\f0 \
1
\f1 \'a1\'a2\'d5\'d2\'b5\'bd\'c1\'b4\'b1\'ed\'b5\'c4
\f0 middle
\f1 \'bd\'da\'b5\'e3\'a3\'ac
\f0 \
2
\f1 \'a1\'a2\'c8\'bb\'ba\'f3\'b5\'dd\'b9\'e9\'b6\'d4\'c7\'b0\'b0\'eb\'b2\'bf\'b7\'d6\'ba\'cd\'ba\'f3\'b0\'eb\'b2\'bf\'b7\'d6\'b7\'d6\'b1\'f0\'bd\'f8\'d0\'d0\'b9\'e9\'b2\'a2\'c5\'c5\'d0\'f2\'a3\'ac
\f0 \
3
\f1 \'a1\'a2\'d7\'ee\'ba\'f3\'b6\'d4\'c1\'bd\'b8\'f6\'d2\'d4\'c5\'c5\'ba\'c3\'d0\'f2\'b5\'c4\'c1\'b4\'b1\'ed\'bd\'f8\'d0\'d0
\f0 Merge
\f1 \'a1\'a3
\f0 \
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* merge(ListNode* head,ListNode* fast)\
    \{\
        ListNode* ret=new ListNode(0);\
        ListNode* p=ret;\
        while(head || fast)\
        \{\
            if(!head)\
            \{    \
                p->next=fast;\
                break;\
            \}\
            else if(!fast)\
            \{    \
                p->next=head;\
                break;\
            \}\
            if(head->val<fast->val)\
            \{\
                p->next=head;\
                head=head->next;\
            \}\
            else\
            \{\
                p->next=fast;\
                fast=fast->next;\
            \}\
            p=p->next;\
            p->next=NULL;\
        \}\
        p=ret->next;\
        delete ret;\
        return p;\
    \}\
    \
    \
    ListNode* sortList(ListNode* head) \
    \{\
        if(!head)\
            return NULL;\
        else if(!head->next)\
            return head;\
        else if(!head->next->next)\
        \{\
           if(head->val>head->next->val)\
            \{\
                ListNode* p=head->next;\
                p->next=head;\
                head->next=NULL;\
                return p;\
            \}\
            return head;\
        \}\
       \
        //
\f1 \'d5\'d2\'b5\'bd\'d6\'d0\'bc\'e4\'bd\'e1\'b5\'e3
\f0 \
        ListNode* slow=head;\
        ListNode* fast=head;\
        while(fast && fast->next)\
        \{\
            slow=slow->next;\
            fast=fast->next->next;\
        \}\
       \
        fast=slow->next;\
        slow->next=NULL;\
\
        //
\f1 \'b5\'dd\'b9\'e9\'c7\'b0\'b0\'eb\'b2\'bf\'b7\'d6\'ba\'cd\'ba\'f3\'b0\'eb\'b2\'bf\'b7\'d6
\f0 \
        head=sortList(head);\
        fast=sortList(fast);\
       \
        //
\f1 \'d7\'ee\'ba\'f3
\f0 merge
\f1 \'c1\'bd\'b8\'f6
\f0 \
        head=merge(head,fast);    \
       \
        return head;  \
    \}\
\};}