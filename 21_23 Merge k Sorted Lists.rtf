{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\
\
way-1:\'c3\'bf\'b4\'ce\'b4\'d3\'ca\'fd\'d7\'e9\'d6\'d0\'c8\'a1\'c1\'bd\'b8\'f6\'c1\'b4\'b1\'ed\'a3\'ac\'bd\'ab\'ba\'cf\'b2\'a2\'bd\'e1\'b9\'fb\'bc\'d3\'c8\'eb\'b5\'bd\'c1\'b4\'b1\'ed\'d6\'d0\'a3\'ac\'b7\'b4\'b8\'b4\'d5\'e2\'b8\'f6\'b9\'fd\'b3\'cc\'a3\'ac\'d6\'b1\'b5\'bd\'ca\'fd\'d7\'e9\'d6\'d0\'d6\'bb\'ca\'a3\'d2\'bb\'b8\'f6\'c1\'b4\'b1\'ed\'ce\'aa\'d6\'b9,\'b6\'d4\'c1\'bd\'b8\'f6\'c1\'b4\'b1\'ed\'bd\'f8\'d0\'d0\'ba\'cf\'b2\'a2\'b5\'c4\'b4\'fa\'c2\'eb\'bf\'c9\'d2\'d4\'b8\'b4\'d3\'c3LeetCode21\'b5\'c4\'b4\'fa\'c2\'eb\'a1\'a3\
\
way-2:\'b0\'d1\'c3\'bf\'b8\'f6\'c1\'b4\'b1\'ed\'b5\'c4\'cd\'b7\'d2\'bb\'b8\'f6\'b4\'e6\'d4\'damap\'c0\'ef\'a3\'ac\'c0\'fb\'d3\'c3map\'b5\'c4\'c5\'c5\'d0\'f2\'b9\'a6\'c4\'dc\'a3\'ac\'c3\'bf\'c4\'c3\'b3\'f6\'d7\'ee\'d0\'a1\'b5\'c4\'d2\'bb\'b8\'f6\'a3\'ac\'b0\'d1\'b8\'fa\'d7\'c5\'b5\'c4\'d2\'bb\'b8\'f6\'b2\'b9\'bd\'f8\'c8\'a5\
*/\
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
	ListNode* mergeKLists(vector<ListNode*>& lists)\
	\{\
		//way-1\
		\
		ListNode *kong = NULL;\
		if (lists.size() == 0)\
			return kong;\
		ListNode *p;\
		while (true)\
		\{\
			for (int i = 0; i < lists.size() - 1; i++)\
			\{\
                if(lists[i]==NULL)//erase null list\
                \{\
                    lists.erase(lists.begin()+i);\
                    i--;\
                    continue;\
                \}\
                if(lists[i+1]==NULL)\
                \{\
                    lists.erase(lists.begin()+i+1);\
                    i--;\
                    continue;\
                \}\
				if (lists[i]->val < lists[i + 1]->val)\
				\{\
					kong = lists[i];\
					p = lists[i];\
					lists[i] = lists[i]->next;\
				\}\
				else\
				\{\
					kong = lists[i + 1];\
					p = lists[i + 1];\
					lists[i + 1] = lists[i + 1]->next;\
				\}\
\
				while (true)\
				\{\
					if (lists[i] != NULL && lists[i + 1] != NULL)\
					\{\
						if (lists[i]->val < lists[i + 1]->val)\
						\{   \
							p->next = lists[i];\
							p = lists[i];\
							lists[i] = lists[i]->next;\
						\}\
						else\
						\{\
							p->next = lists[i + 1];\
							p = lists[i+1];\
							lists[i + 1] = lists[i + 1]->next;\
						\}\
					\}\
					else if (lists[i] == NULL && lists[i + 1] != NULL)\
					\{\
						p->next = lists[i + 1];\
						break;\
					\}\
					else\
					\{\
						p->next = lists[i];\
						break;\
					\}\
				\}\
				lists[i] = kong;\
				lists.erase(lists.begin() + i + 1);\
			\}\
			if (lists.size() == 1)\
				return lists[0];\
		\}\
        \
        \
        //way-2\
        /*\
        multimap<int,ListNode*> mm;\
        for(int i=0;i<lists.size();i++)\
        \{\
            if(lists[i]==NULL)\
            \{\
                lists.erase(lists.begin()+i);\
                i--;\
                continue;\
            \}\
            else\
                mm.insert(pair<int,ListNode*>(lists[i]->val,lists[i]));\
        \}\
        \
        ListNode head(-1);\
        ListNode *p=&head;\
        \
        while(!mm.empty())\
        \{\
            auto it=mm.begin();\
            p->next=it->second;\
            p=p->next;\
            ListNode *q=it->second->next;\
            if(q!=NULL)\
                mm.insert(pair<int,ListNode*>(q->val,q));\
            mm.erase(it);\
        \}\
        return head.next;\
        */\
	\}\
\};}