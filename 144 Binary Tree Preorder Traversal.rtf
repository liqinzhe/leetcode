{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, return the preorder traversal of its nodes' values.\
\
For example:\
Given binary tree \{1,#,2,3\},\
   1\
    \\\
     2\
    /\
   3\
return [1,2,3].\
\
Note: Recursive solution is trivial, could you do it iteratively?\
\
way-1 : 
\f1 \'b5\'dd\'b9\'e9
\f0 \
\
way-2: 
\f1 \'b5\'fc\'b4\'fa
\f0 \
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void preorderTraversal1(vector<int> &ret, TreeNode* root)\
    \{\
        if (!root)\
            return;\
        ret.push_back(root->val);\
        preorderTraversal1(ret, root->left);\
        preorderTraversal1(ret, root->right);\
    \}\
    \
    vector<int> preorderTraversal(TreeNode* root) \
    \{\
        \
        //way-1 : 
\f1 \'b5\'dd\'b9\'e9
\f0 \
        /*\
        vector<int> ret;\
        preorderTraversal1(ret, root);\
        return ret;\
        */\
        \
        //way-2: 
\f1 \'b5\'fc\'b4\'fa
\f0 \
        vector<int> ret;\
        stack<TreeNode *> haspoint;\
        if (root)\
            haspoint.push(root);\
      \
        while(!haspoint.empty())\
        \{\
            TreeNode* p = haspoint.top();\
            haspoint.pop();\
            ret.push_back(p->val);\
            \
            if (p->right)\
                haspoint.push(p->right);\
            if (p->left)\
                haspoint.push(p->left);\
        \}\
        return ret;\
    \}\
\};}