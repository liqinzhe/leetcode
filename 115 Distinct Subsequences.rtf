{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww24240\viewh17300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a string S and a string T, count the number of distinct subsequences of T in S.\
\
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).\
\
Here is an example:\
S = "rabbbit", T = "rabbit"\
\
Return 3.\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\'b6\'af\'cc\'ac\'b9\'e6\'bb\'ae\'cb\'bc\'cf\'eb\'d3\'a6\'d3\'c3\'b5\'c4\'b5\'e4\'d0\'cd\'cc\'e2\'c4\'bf\'a1\'a3
\f2 \cf0 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1 \expnd0\expndtw0\kerning0
\'b6\'a8\'d2\'e5\'b6\'fe\'ce\'ac\'ca\'fd\'d7\'e9
\f2 dp[i][j]
\f1 \'ce\'aa\'d7\'d6\'b7\'fb\'b4\'ae
\f2 s(0,j)
\f1 \'b1\'e4\'bb\'bb\'b5\'bd
\f2 t(0,i)
\f1 \'b5\'c4\'b1\'e4\'bb\'bb\'b7\'bd\'b7\'a8\'a1\'a3
\f2 \cf0 \cb1 \
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1 \expnd0\expndtw0\kerning0
\'c8\'e7\'b9\'fb
\f2 S[i]==T[j]
\f1 \'a3\'ac\'c4\'c7\'c3\'b4
\f2 dp[i][j] = dp[i-1][j-1] + dp[i][j-1]
\f1 \'a1\'a3\'d2\'e2\'cb\'bc\'ca\'c7\'a3\'ba\'c8\'e7\'b9\'fb\'b5\'b1\'c7\'b0
\f2 S[i]==T[j]
\f1 \'a3\'ac\'c4\'c7\'c3\'b4\'b5\'b1\'c7\'b0\'d5\'e2\'b8\'f6\'d7\'d6\'c4\'b8\'bc\'b4\'bf\'c9\'d2\'d4\'b1\'a3\'c1\'f4\'d2\'b2\'bf\'c9\'d2\'d4\'c5\'d7\'c6\'fa\'a3\'ac\'cb\'f9\'d2\'d4\'b1\'e4\'bb\'bb\'b7\'bd\'b7\'a8\'b5\'c8\'d3\'da\'b1\'a3\'c1\'f4\'d5\'e2\'b8\'f6\'d7\'d6\'c4\'b8\'b5\'c4\'b1\'e4\'bb\'bb\'b7\'bd\'b7\'a8\'bc\'d3\'c9\'cf\'b2\'bb\'d3\'c3\'d5\'e2\'b8\'f6\'d7\'d6\'c4\'b8\'b5\'c4\'b1\'e4\'bb\'bb\'b7\'bd\'b7\'a8\'a1\'a3
\f2 \cf0 \cb1 \
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1 \expnd0\expndtw0\kerning0
\'c8\'e7\'b9\'fb
\f2 S[i]!=T[i]
\f1 \'a3\'ac\'c4\'c7\'c3\'b4
\f2 dp[i][j] = dp[i][j-1]
\f1 \'a3\'ac\'d2\'e2\'cb\'bc\'ca\'c7\'c8\'e7\'b9\'fb\'b5\'b1\'c7\'b0\'d7\'d6\'b7\'fb\'b2\'bb\'b5\'c8\'a3\'ac\'c4\'c7\'c3\'b4\'be\'cd\'d6\'bb\'c4\'dc\'c5\'d7\'c6\'fa\'b5\'b1\'c7\'b0\'d5\'e2\'b8\'f6\'d7\'d6\'b7\'fb\'a1\'a3
\f2 \cf0 \cb1 \
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}
\f1 \expnd0\expndtw0\kerning0
\'b5\'dd\'b9\'e9\'b9\'ab\'ca\'bd\'d6\'d0\'d3\'c3\'b5\'bd\'b5\'c4
\f2 dp[0][j] = 1
\f1 \'a3\'ac
\f2 dp[i][0] = 0
\f1 \'a3\'a8\'b0\'d1\'c8\'ce\'d2\'e2\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'b4\'ae\'b1\'e4\'bb\'bb\'ce\'aa\'d2\'bb\'b8\'f6\'bf\'d5\'b4\'ae\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'b7\'bd\'b7\'a8\'a3\'a9
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 */\
class Solution \{\
public:\
   \
    int numDistinct(string s, string t) \
    \{\
        int dp[t.size()+1][s.size()+1]=\{0\};\
        for(int j=0;j<=s.size();j++)\
            dp[0][j]=1;\
        for(int i=1;i<=t.size();i++)\
        \{\
            for(int j=0;j<=s.size();j++)\
            \{\
                if(j>=i)  \
                    dp[i][j]=dp[i][j-1]+(t[i-1]==s[j-1]?dp[i-1][j-1]:0);\
            \}\
        \}\
        return dp[t.size()][s.size()];\
    \}\
\};}