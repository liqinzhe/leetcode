{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\
 \
For example, given the following matrix:\
 \
1 0 1 0 0\
1 0 1 1 1\
1 1 1 1 1\
1 0 0 1 0\
Return 6.\
 \
way-1:\

\f1 \'d5\'e2\'b5\'c0\'cc\'e2\'b8\'fa\'d7\'ee\'b4\'f3\'d7\'d3\'be\'d8\'d5\'f3\'b5\'c4\'cb\'bc\'cf\'eb\'b1\'c8\'bd\'cf\'c0\'e0\'cb\'c6\'a3\'ac\'b6\'bc\'ca\'c7\'bd\'b5\'d2\'bb\'ce\'ac\'a3\'a8\'bc\'f5\'c9\'d9\'b1\'e4\'c1\'bf\'ca\'fd\'c1\'bf\'a3\'a9\'d7\'aa\'bb\'af\'b3\'c9\'bc\'f2\'b5\'a5\'ce\'ca\'cc\'e2
\f0 \
\

\f1 \'d6\'b8\'b6\'a8\'c8\'ce\'d2\'e2\'d2\'bb\'d0\'d0\'d7\'f7\'ce\'aa\'be\'d8\'d0\'ce\'b5\'c4\'cf\'c2\'b1\'df\'bd\'e7\'a3\'ac\'c4\'c7\'c3\'b4\'ce\'ca\'cc\'e2\'be\'cd\'b1\'e4\'b3\'c9\'c1\'cb\'c7\'f3\'d6\'b1\'b7\'bd\'cd\'bc\'b5\'c4\'d7\'ee\'b4\'f3\'c3\'e6\'bb\'fd\'b5\'c4\'be\'d8\'d0\'ce\'a3\'ac\'b2\'ce\'bc\'fb\'d6\'ae\'c7\'b0\'b5\'c4\'d5\'e2\'c6\'aa\'ce\'c4\'d5\'c2\'a1\'a3
\f0 \

\f1 \'cb\'f9\'d2\'d4\'cb\'bc\'c2\'b7\'be\'cd\'ca\'c7\'a3\'ac\'b4\'d3\'c9\'cf\'b5\'bd\'cf\'c2\'a3\'ac\'d2\'c0\'b4\'ce\'c7\'f3\'d6\'b1\'b7\'bd\'cd\'bc\'d7\'ee\'b4\'f3\'c3\'e6\'bb\'fd\'be\'d8\'d0\'ce\'a3\'ac\'b8\'d0\'be\'f5\'cb\'b2\'bc\'e4\'c3\'bb\'d3\'d0\'c4\'d1\'b6\'c8\'c1\'cb\'a1\'a3\'cf\'c2\'c3\'e6\'b5\'c4\'b4\'fa\'c2\'eb\'c0\'ef\'a3\'ac\'b5\'da\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'be\'cd\'ca\'c7\'d4\'ad\'b7\'e2\'b2\'bb\'b6\'af\'b0\'e1\'b9\'fd\'c0\'b4\'b5\'c4\'a1\'a3\'a1\'a3
\f0 \
     \
*/\
class Solution \{\
public:\
    int largestRectangleArea(vector<int>& height) \
    \{\
        int result = 0;\
        stack<int> stk;\
        \
        for(int i = 0; i < height.size(); i++) \
        \{\
            if (stk.empty() || stk.top() <= height[i])\
                stk.push(height[i]);\
            else\
            \{\
                int count = 0;\
                while (!stk.empty() && stk.top() > height[i])\
                \{\
                    count++;\
                    result = max(result, stk.top() * count);\
                    stk.pop();\
                \}\
                while (count--)\
                    stk.push(height[i]);\
                stk.push(height[i]);\
            \}\
        \}\
        int count = 1;        \
        while ( !stk.empty() )\
        \{\
            result = max(result, stk.top() * count);\
            count ++;\
            stk.pop();\
        \}\
        return result;\
    \}\
   \
    int maximalRectangle(vector<vector<char>>& matrix)\
    \{\
        if (matrix.empty() || matrix[0].empty())\
            return 0;\
\
        int maxArea = 0;\
        int row = matrix.size();\
        int col = matrix[0].size();\
        \
        vector<int> histo(col + 1, 0); // 
\f1 \'d4\'da\'c4\'a9\'ce\'b2\'d4\'f6\'bc\'d3\'d2\'bb\'b8\'f6
\f0 0
\f1 \'c6\'f0\'ca\'d5\'b8\'ee\'d7\'f7\'d3\'c3
\f0 \
\
        for (int i = 0; i < row; i++) \
        \{\
            // 
\f1 \'bc\'c6\'cb\'e3\'d6\'b1\'b7\'bd\'cd\'bc
\f0 \
            for (int j = 0; j < col; j++)\
                histo[j] = (histo[j] + 1) * (matrix[i][j] - '0'); //\
\
            maxArea = max(maxArea, largestRectangleArea(histo));\
        \}\
\
        return maxArea;\
    \}\
\};}