{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\
\
You may assume the two numbers do not contain any leading zero, except the number 0 itself.\
\
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\
Output: 7 -> 0 -> 8\
\
\
*/\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) \
    \{\
        bool flag=false;\
        int sum;\
        unsigned int lhs,rhs;\
        ListNode* result(0);//
\f1 \'d5\'e2\'c0\'ef\'b1\'d8\'d0\'eb\'d2\'aa
\f0 result(0)!!\
        ListNode* p(0);\
        if(l1==NULL)\
            return l2;\
        if(l2==NULL)\
            return l1;\
        while(l1!=NULL||l2!=NULL)\
        \{\
            if(l1==NULL)\
                lhs=0;\
            else\
            \{\
                lhs=l1->val;\
                l1=l1->next;\
            \}\
             if(l2==NULL)\
                rhs=0;\
            else\
            \{\
                rhs=l2->val;\
                l2=l2->next;\
            \}\
            sum=(flag?lhs+rhs+1:lhs+rhs);\
            if(sum>=10)\
            \{\
                flag=true;\
                sum=sum%10;\
            \}\
            else\
                flag=false;\
            ListNode* tmp=new ListNode(sum);\
            if(result==NULL)\
            \{    \
                result=tmp;\
                p=tmp;\
            \}\
            else\
            \{\
                p->next=tmp;\
                p=p->next;\
            \}\
            \
        \}\
        if(flag)\
        \{\
            ListNode* tmp=new ListNode(1);\
            p->next=tmp;\
        \}\
        return result;\
    \}\
\};\
\
\
\
python:\
# Definition for singly-linked list.\
# class ListNode(object):\
#     def __init__(self, x):\
#         self.val = x\
#         self.next = None\
\
class Solution(object):\
    def addTwoNumbers(self, l1, l2):\
        """\
        :type l1: ListNode\
        :type l2: ListNode\
        :rtype: ListNode\
        """\
        if l1 == None:\
            return l2\
        if l2 == None:\
            return l1\
        \
        ret = ListNode(0)\
        q = ret\
        flag = 0\
        while l1 != None or l2 != None:\
            if l1 == None:\
                lvalue = 0\
            else:\
                lvalue = l1.val\
                l1 = l1.next\
            if l2 == None:\
                rvalue = 0\
            else:\
                rvalue = l2.val\
                l2 = l2.next\
            \
            allsum = lvalue + rvalue + flag\
            if allsum < 10:\
                p = ListNode(allsum)\
                flag = 0         \
            else:\
                p = ListNode(allsum - 10)\
                flag = 1\
            q.next = p\
            q = q.next\
                \
        if flag == 1:\
            p = ListNode(1)\
            q.next = p\
        \
        return ret.next\
}