{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\
\
For example:\
Given the below binary tree and sum = 22,\
              5\
             / \\\
            4   8\
           /   / \\\
          11  13  4\
         /  \\    / \\\
        7    2  5   1\
return\
[\
   [5,4,11,2],\
   [5,8,4,5]\
]\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void guocheng(TreeNode* p, int sum, vector<vector<int>> & result, vector<int> m1)\
    \{\
        if (!p)\
          return;\
        \
        m1.push_back(p->val);\
        if (!p->left && !p->right && p->val == sum)\
        \{  \
            result.push_back(m1);\
            return;\
        \}\
        guocheng(p->left, sum-p->val, result, m1);\
        guocheng(p->right, sum-p->val, result, m1);\
    \}\
    \
    \
    vector<vector<int>> pathSum(TreeNode* root, int sum) \
    \{\
        vector<vector<int>> result;\
        vector<int> m1;\
        guocheng(root, sum, result, m1);\
        return result;  \
    \} \
\};\
\
\
    \
    \
\
}