{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\
\
For example, this binary tree [1,2,2,3,4,4,3] is symmetric:\
\
    1\
   / \\\
  2   2\
 / \\ / \\\
3  4 4  3\
But the following [1,2,2,null,3,null,3] is not:\
    1\
   / \\\
  2   2\
   \\   \\\
   3    3\
Note:\
Bonus points if you could solve it both recursively and iteratively.\
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    bool isSymmetric(TreeNode* root) \
    \{\
        deque<TreeNode*> que; \
        if (root)\
        \{\
            que.push_back(root->left);\
            que.push_back(root->right);\
        \}\
        while (!que.empty())\
        \{\
            TreeNode * left = que.front();\
            TreeNode * right = que.back();\
            que.pop_front();\
            que.pop_back();\
            if (left == NULL && right == NULL)\
                continue;\
            else if(left == NULL || right == NULL)\
                return 0;\
            else if(left->val != right->val)\
                return 0;\
            else\
            \{\
                que.push_front(left->right);\
                que.push_front(left->left);\
                que.push_back(right->left);\
                que.push_back(right->right);\
            \}\
        \}\
        return 1;\
    \}\
\};}