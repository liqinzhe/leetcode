{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a set of distinct integers, nums, return all possible subsets.\
\
Note: The solution set must not contain duplicate subsets.\
\
For example,\
If nums = [1,2,3], a solution is:\
\
[\
  [3],\
  [1],\
  [2],\
  [1,2,3],\
  [1,3],\
  [2,3],\
  [1,2],\
  []\
]\
\
way-1 : 
\f1 \'b5\'dd\'b9\'e9\'cd\'f9\'d7\'d3\'d0\'f2\'c1\'d0\'d6\'d0\'cc\'ed\'bc\'d3
\f0 \
        backtracking\
\
way-2:\

\f1 \'be\'df\'cc\'e5\'b5\'c4\'cb\'bc\'c2\'b7\'ca\'c7\'d5\'e2\'d1\'f9\'b5\'c4\'a3\'ba
\f0 \

\f1 \'b3\'f5\'ca\'bc\'d7\'b4\'cc\'ac
\f0 : []\

\f1 \'b5\'da
\f0 0
\f1 \'b4\'ce\'a3\'ac\'bc\'d3\'c8\'eb
\f0 S[0]: [], [1]\

\f1 \'b5\'da
\f0 1
\f1 \'b4\'ce\'a3\'ac\'bc\'d3\'c8\'eb
\f0 S[1]: [], [1], [2], [1, 2]\

\f1 \'b5\'da
\f0 1
\f1 \'b4\'ce\'a3\'ac\'bc\'d3\'c8\'eb
\f0 S[2]: [], [1], [2], [1, 2], [3], [1,3], [2,3], [1,2,3]\

\f1 \'b4\'d3\'c9\'cf\'c3\'e6\'bf\'c9\'d2\'d4\'bf\'b4\'b3\'f6\'a3\'ac\'b5\'da
\f0 0
\f1 \'b4\'ce
\f0 ->
\f1 \'b5\'da
\f0 1
\f1 \'b4\'ce\'a3\'ac\'b0\'d1
\f0 S[1]
\f1 \'bc\'d3\'c8\'eb\'b5\'bd
\f0 S[0]
\f1 \'b5\'c4\'c3\'bf\'b8\'f6
\f0 subset
\f1 \'d6\'d0\'a3\'ac\'d0\'ce\'b3\'c9\'d0\'c2\'b5\'c4
\f0 subset(
\f1 \'bc\'b4
\f0 [2], [1, 2])
\f1 \'d5\'e2\'b6\'d1\'d0\'c2\'b5\'c4
\f0 subset
\f1 \'ba\'cd\'d6\'ae\'c7\'b0
\f0 S[0]
\f1 \'ca\'b1\'ba\'f2\'b5\'c4\'c4\'c7\'b6\'d1\'c0\'cf\'b5\'c4
\f0 subset(
\f1 \'bc\'b4
\f0 [], [1])
\f1 \'d2\'bb\'c6\'f0\'b9\'b9\'b3\'c9
\f0 S[1]
\f1 \'b5\'c4\'bd\'e1\'b9\'fb
\f0 (
\f1 \'bc\'b4
\f0   [], [1], [2], [1, 2])
\f1 \'a1\'a3
\f0  \

\f1 \'d6\'d8\'b8\'b4\'d5\'e2\'b8\'f6\'b9\'fd\'b3\'cc\'d6\'b1\'b5\'bd\'b0\'d1
\f0 S
\f1 \'b5\'c4\'c3\'bf\'b8\'f6\'d4\'aa\'cb\'d8\'b6\'bc\'bc\'d3\'c8\'eb\'c1\'cb\'b5\'b1\'c7\'b0\'b5\'c4\'bc\'af\'ba\'cf\'a1\'a3
\f0 \
\
way-3:\

\f1 \'b5\'da\'c8\'fd\'b8\'f6\'cb\'bc\'bf\'bc\'b7\'bd\'cf\'f2\'a3\'ac\'b4\'d3\'ca\'fd\'d1\'a7\'bd\'c7\'b6\'c8\'c0\'b4\'bf\'b4\'a3\'ac\'bc\'d9\'c9\'e8\'d4\'ad\'bc\'af\'ba\'cf\'d3\'d0
\f0 n
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'c4\'c7\'c3\'b4\'d4\'ad\'bc\'af\'ba\'cf\'b5\'c4\'d7\'d3\'bc\'af\'ba\'cf\'b5\'c4\'b8\'f6\'ca\'fd\'ca\'c7
\f0 2
\f1 \'b5\'c4
\f0 n
\f1 \'b4\'ce\'b7\'bd\'a3\'ac\'bc\'c7\'ce\'aa
\f0 2 ^ n
\f1 \'a1\'a3\'b6\'d4\'d3\'a6\'d7\'c5\'b4\'d3
\f0 0~2 ^ n - 1
\f1 \'d5\'e2
\f0 2 ^ n
\f1 \'b8\'f6\'ca\'fd\'a1\'a3\'d5\'e2
\f0 2 ^ n
\f1 \'b8\'f6\'ca\'fd\'c8\'e7\'b9\'fb\'d3\'c3\'b6\'fe\'bd\'f8\'d6\'c6\'b1\'ed\'ca\'be\'a3\'ac\'bf\'c9\'d2\'d4\'b7\'a2\'cf\'d6\'d2\'bb\'b9\'b2\'d3\'d0
\f0 n
\f1 \'ce\'bb\'a1\'a3\'c3\'bf\'ce\'bb\'d2\'aa\'c3\'b4\'c8\'a1
\f0 0
\f1 \'a3\'ac\'d2\'aa\'c3\'b4\'c8\'a1
\f0 1
\f1 \'a1\'a3\'c8\'e7\'b9\'fb\'b5\'da
\f0 i
\f1 \'ce\'bb\'c8\'a1
\f0 0
\f1 \'a3\'ac\'d4\'f2\'cb\'b5\'c3\'f7\'d4\'aa\'bc\'af\'ba\'cf\'b5\'c4\'b5\'da
\f0 i
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b2\'bb\'b3\'f6\'cf\'d6\'d4\'da\'b5\'b1\'c7\'b0\'d0\'c2\'c9\'fa\'b3\'c9\'b5\'c4\'d7\'d3\'bc\'af\'ba\'cf\'d6\'d0\'a3\'ac\'b7\'b4\'d6\'ae\'a3\'ac\'c8\'e7\'b9\'fb\'b5\'da
\f0 i
\f1 \'ce\'bb\'c8\'a1
\f0 1
\f1 \'a3\'ac\'d4\'f2\'cb\'b5\'c3\'f7\'d4\'aa\'bc\'af\'ba\'cf\'b5\'c4\'b5\'da
\f0 i
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'d4\'da\'b5\'b1\'c7\'b0\'d0\'c2\'c9\'fa\'b3\'c9\'b5\'c4\'d7\'d3\'bc\'af\'ba\'cf\'d6\'d0\'a1\'a3\'d5\'e2\'b8\'f6\'cb\'bc\'c2\'b7\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b1\'c8\'cc\'d8\'ce\'bb\'b2\'d9\'d7\'f7\'c0\'b4\'ca\'b5\'cf\'d6\'a1\'a3
\f0 \
\
\
*/\
class Solution \{\
public:\
    void guocheng(int n,int k,int pos,vector<vector<int>> &result,vector<int> m1,vector<int>& nums)\
    \{   \
        //k
\f1 \'b4\'fa\'b1\'ed\'bb\'b9\'d2\'aa\'d1\'a1\'bc\'b8\'b8\'f6
\f0   pos
\f1 \'b4\'fa\'b1\'ed\'c9\'cf\'d2\'bb\'b8\'f6\'ca\'c7\'d1\'a1\'b5\'c4\'ca\'c7\'b6\'e0\'c9\'d9
\f0 \
        if(k==0)\
        \{  \
            result.push_back(m1);\
            return;\
        \}\
        for(int i=pos+1;i<=n-k;i++)\
        \{\
            m1.push_back(nums[i]);\
            guocheng(n, k-1, i, result, m1, nums);\
            m1.pop_back();\
        \}\
    \}\
\
    vector<vector<int>> subsets(vector<int>& nums) \
    \{\
        //way-1\
        /*\
        vector<vector<int>> result;\
        vector<int> m1;\
        \
        for(int i=0;i<=nums.size();i++) //i
\f1 \'bf\'d8\'d6\'c6\'d7\'dc\'b3\'a4\'b6\'c8
\f0 \
            guocheng(nums.size(),i,-1,result,m1,nums);\
       \
        return result;\
        */\
        \
        //way-2\
        /*\
        vector<vector<int>> ret;\
        vector<int> m1;\
        ret.push_back(m1);\
        \
        int n=nums.size();\
        \
        for(int i=0;i<n;i++)\
        \{\
            int k=ret.size();\
            for(int j=0;j<k;j++)\
            \{\
                ret.push_back(ret[j]);\
                ret[ret.size()-1].push_back(nums[i]);\
            \}\
        \}\
        return ret;\
        */\
        \
        //way-3\
        vector<vector<int>> ret;\
        int n=nums.size();\
        \
        for(int i=0;i<(1<<n);i++)   // 1<<n 
\f1 \'b5\'c8\'d3\'da
\f0 2^n\
        \{\
            vector<int> m1;\
            for(int j=0;j<n;j++)\
            \{\
                if((i>>j) & 1)   // i
\f1 \'b5\'c4\'b5\'da
\f0 j
\f1 \'ce\'bb\'ca\'c7\'b7\'f1\'ca\'c7
\f0 1\
                    m1.push_back(nums[j]);\
            \}\
            ret.push_back(m1);\
        \}\
        return ret;\
    \}\
\};}