{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given a complete binary tree, count the number of nodes.\
\
Definition of a complete binary tree from Wikipedia:\
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\
\

\f1 \'b6\'d4\'d3\'da\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3
\f0 node
\f1 \'a3\'ac\'bc\'c6\'cb\'e3\'cb\'fc\'d7\'ee\'d7\'f3\'b6\'cb\'b5\'c4\'bd\'da\'b5\'e3\'b5\'bd
\f0 node
\f1 \'b5\'c4\'c9\'ee\'b6\'c8\'ce\'aa
\f0 leftDepth
\f1 \'a3\'ac\'bc\'c6\'cb\'e3\'cb\'fc\'d7\'ee\'d3\'d2\'b6\'cb\'b5\'c4\'bd\'da\'b5\'e3\'b5\'bd
\f0 node
\f1 \'b5\'c4\'c9\'ee\'b6\'c8\'ca\'c7
\f0 rightDepth
\f1 \'a3\'bb
\f0 \

\f1 \'c8\'e7\'b9\'fb
\f0 leftDepth
\f1 \'ba\'cd
\f0 rightDepth
\f1 \'cf\'e0\'b5\'c8\'a3\'ac\'c4\'c7\'c3\'b4\'d2\'d4
\f0 node
\f1 \'ce\'aa\'b8\'f9\'bd\'da\'b5\'e3\'b5\'c4\'ca\'f7\'ca\'c7\'d2\'bb\'bf\'c3\'c2\'fa\'b6\'fe\'b2\'e6\'ca\'f7\'a3\'ac\'b4\'cb\'ca\'b1\'d2\'d4
\f0 node
\f1 \'ce\'aa\'b8\'f9\'bd\'da\'b5\'e3\'b5\'c4\'ca\'f7\'b5\'c4\'bd\'da\'b5\'e3\'b8\'f6\'ca\'fd\'ca\'c7
\f0 pow(2,leftDepth)-1
\f1 \'a3\'bb
\f0 \

\f1 \'c8\'e7\'b9\'fb
\f0 leftDepth
\f1 \'ba\'cd
\f0 rightDepth
\f1 \'b2\'bb\'cf\'e0\'b5\'c8\'a3\'ac\'b5\'dd\'b9\'e9\'c7\'f3\'bd\'e2
\f0 node
\f1 \'b5\'c4\'d7\'f3\'d7\'d3\'ca\'f7\'b5\'c4\'bd\'da\'b5\'e3\'ca\'fd\'ba\'cd\'d3\'d2\'d7\'d3\'ca\'f7\'b5\'c4\'bd\'da\'b5\'e3\'ca\'fd\'a1\'a3
\f0 (
\f1 \'d7\'a2\'d2\'e2\'b4\'cb\'ca\'b1\'d7\'f3\'d7\'d3\'ca\'f7\'b1\'d8\'b6\'a8\'ca\'c7\'c2\'fa\'b6\'fe\'b2\'e6\'ca\'f7\'c1\'cb
\f0 ???)
\f1 \'a1\'a3
\f0 \

\f1 \'b4\'d3\'d5\'e2\'b5\'c0\'cc\'e2\'d6\'d0\'d1\'a7\'b5\'bd\'b5\'c4\'d2\'bb\'b8\'f6\'ba\'dc\'c9\'ee\'b5\'c4\'bd\'cc\'d1\'b5\'ca\'c7\'b6\'d4\'d3\'da\'ca\'f7\'b5\'c4\'ce\'ca\'cc\'e2\'a3\'ac\'b5\'dd\'b9\'e9\'ca\'c7\'d2\'bb\'b8\'f6\'ba\'dc\'ba\'c3\'b5\'c4\'c0\'fb\'c6\'f7\'a3\'ac\'d2\'f2\'ce\'aa\'ca\'f7\'b1\'be\'c9\'ed\'be\'cd\'ca\'c7\'d3\'c3\'b5\'dd\'b9\'e9\'c0\'b4\'b6\'a8\'d2\'e5\'b5\'c4\'a1\'a3
\f0 \
\
*/\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    int countNodes(TreeNode* root) \
    \{\
        if(!root)  \
            return 0;  \
                  \
        int leftDepth = 0;  \
        int rightDepth = 0;  \
        for (TreeNode* node = root; node != NULL; node = node->left)  \
            leftDepth++;  \
        for (TreeNode* node = root; node != NULL; node = node->right)  \
            rightDepth++;  \
        if (leftDepth == rightDepth)  \
            return (1<<leftDepth) - 1;  \
        else  \
            return countNodes(root->left) + countNodes(root->right) + 1;\
    \}\
\};}